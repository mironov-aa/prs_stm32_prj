
Diploma_optimus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002260  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002320  08002320  00012320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002364  08002364  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002364  08002364  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002364  08002364  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800236c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a4  20000008  08002374  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019ac  08002374  000219ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006752  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fca  00000000  00000000  00026782  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000590  00000000  00000000  00027750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000508  00000000  00000000  00027ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012924  00000000  00000000  000281e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004466  00000000  00000000  0003ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063d16  00000000  00000000  0003ef72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2c88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001328  00000000  00000000  000a2d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002308 	.word	0x08002308

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08002308 	.word	0x08002308

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000224:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <SystemInit+0x74>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <SystemInit+0x74>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <SystemInit+0x74>)
 8000232:	685a      	ldr	r2, [r3, #4]
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <SystemInit+0x74>)
 8000236:	4918      	ldr	r1, [pc, #96]	; (8000298 <SystemInit+0x78>)
 8000238:	400a      	ands	r2, r1
 800023a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <SystemInit+0x74>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <SystemInit+0x74>)
 8000242:	4916      	ldr	r1, [pc, #88]	; (800029c <SystemInit+0x7c>)
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x74>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <SystemInit+0x74>)
 800024e:	4914      	ldr	r1, [pc, #80]	; (80002a0 <SystemInit+0x80>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SystemInit+0x74>)
 8000256:	685a      	ldr	r2, [r3, #4]
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <SystemInit+0x74>)
 800025a:	4912      	ldr	r1, [pc, #72]	; (80002a4 <SystemInit+0x84>)
 800025c:	400a      	ands	r2, r1
 800025e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <SystemInit+0x74>)
 8000262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <SystemInit+0x74>)
 8000266:	210f      	movs	r1, #15
 8000268:	438a      	bics	r2, r1
 800026a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2C;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <SystemInit+0x74>)
 800026e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <SystemInit+0x74>)
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <SystemInit+0x88>)
 8000274:	400a      	ands	r2, r1
 8000276:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SystemInit+0x74>)
 800027a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <SystemInit+0x74>)
 800027e:	2101      	movs	r1, #1
 8000280:	438a      	bics	r2, r1
 8000282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <SystemInit+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
	
	/* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800028a:	f000 f80f 	bl	80002ac <SetSysClock>

}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	08ffb80c 	.word	0x08ffb80c
 800029c:	fef6ffff 	.word	0xfef6ffff
 80002a0:	fffbffff 	.word	0xfffbffff
 80002a4:	ffc0ffff 	.word	0xffc0ffff
 80002a8:	fffcfe2c 	.word	0xfffcfe2c

080002ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <SetSysClock+0x7c>)
 80002b2:	2211      	movs	r2, #17
 80002b4:	601a      	str	r2, [r3, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002b6:	4a1d      	ldr	r2, [pc, #116]	; (800032c <SetSysClock+0x80>)
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <SetSysClock+0x80>)
 80002ba:	6852      	ldr	r2, [r2, #4]
 80002bc:	605a      	str	r2, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80002be:	4a1b      	ldr	r2, [pc, #108]	; (800032c <SetSysClock+0x80>)
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <SetSysClock+0x80>)
 80002c2:	6852      	ldr	r2, [r2, #4]
 80002c4:	605a      	str	r2, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL));
 80002c6:	4b19      	ldr	r3, [pc, #100]	; (800032c <SetSysClock+0x80>)
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <SetSysClock+0x80>)
 80002cc:	4918      	ldr	r1, [pc, #96]	; (8000330 <SetSysClock+0x84>)
 80002ce:	400a      	ands	r2, r1
 80002d0:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_DIV2 | RCC_CFGR_PLLMUL12);
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <SetSysClock+0x80>)
 80002d4:	685a      	ldr	r2, [r3, #4]
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <SetSysClock+0x80>)
 80002d8:	21a0      	movs	r1, #160	; 0xa0
 80002da:	0389      	lsls	r1, r1, #14
 80002dc:	430a      	orrs	r2, r1
 80002de:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <SetSysClock+0x80>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <SetSysClock+0x80>)
 80002e6:	2180      	movs	r1, #128	; 0x80
 80002e8:	0449      	lsls	r1, r1, #17
 80002ea:	430a      	orrs	r2, r1
 80002ec:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <SetSysClock+0x80>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	049b      	lsls	r3, r3, #18
 80002f8:	4013      	ands	r3, r2
 80002fa:	d0f9      	beq.n	80002f0 <SetSysClock+0x44>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <SetSysClock+0x80>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <SetSysClock+0x80>)
 8000302:	2103      	movs	r1, #3
 8000304:	438a      	bics	r2, r1
 8000306:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <SetSysClock+0x80>)
 800030a:	685a      	ldr	r2, [r3, #4]
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <SetSysClock+0x80>)
 800030e:	2102      	movs	r1, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	605a      	str	r2, [r3, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <SetSysClock+0x80>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	220c      	movs	r2, #12
 800031c:	4013      	ands	r3, r2
 800031e:	2b08      	cmp	r3, #8
 8000320:	d1f9      	bne.n	8000316 <SetSysClock+0x6a>
  {
  }
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40022000 	.word	0x40022000
 800032c:	40021000 	.word	0x40021000
 8000330:	ffc27fff 	.word	0xffc27fff

08000334 <main>:
void vLed2Task(void* argument);



int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af02      	add	r7, sp, #8
	GPIO_init();
 800033a:	f000 f85d 	bl	80003f8 <GPIO_init>

	xTaskCreate(vLed1Task, "LED", 32, NULL, 1, NULL);
 800033e:	490b      	ldr	r1, [pc, #44]	; (800036c <main+0x38>)
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <main+0x3c>)
 8000342:	2300      	movs	r3, #0
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2300      	movs	r3, #0
 800034c:	2220      	movs	r2, #32
 800034e:	f000 fec6 	bl	80010de <xTaskCreate>
	xTaskCreate(vLed2Task, "LED", 32, NULL, 1, NULL);
 8000352:	4906      	ldr	r1, [pc, #24]	; (800036c <main+0x38>)
 8000354:	4807      	ldr	r0, [pc, #28]	; (8000374 <main+0x40>)
 8000356:	2300      	movs	r3, #0
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2300      	movs	r3, #0
 8000360:	2220      	movs	r2, #32
 8000362:	f000 febc 	bl	80010de <xTaskCreate>

	vTaskStartScheduler();
 8000366:	f001 f81b 	bl	80013a0 <vTaskStartScheduler>
	while(1)
 800036a:	e7fe      	b.n	800036a <main+0x36>
 800036c:	08002320 	.word	0x08002320
 8000370:	08000379 	.word	0x08000379
 8000374:	080003b9 	.word	0x080003b9

08000378 <vLed1Task>:

	}
}

void vLed1Task(void* argument)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GPIOC->BSRR |= GPIO_BSRR_BR_8;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <vLed1Task+0x3c>)
 8000382:	699a      	ldr	r2, [r3, #24]
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <vLed1Task+0x3c>)
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	0449      	lsls	r1, r1, #17
 800038a:	430a      	orrs	r2, r1
 800038c:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 800038e:	23fa      	movs	r3, #250	; 0xfa
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	0018      	movs	r0, r3
 8000394:	f000 ffde 	bl	8001354 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BS_8;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <vLed1Task+0x3c>)
 800039a:	699a      	ldr	r2, [r3, #24]
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <vLed1Task+0x3c>)
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	0049      	lsls	r1, r1, #1
 80003a2:	430a      	orrs	r2, r1
 80003a4:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 80003a6:	23fa      	movs	r3, #250	; 0xfa
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 ffd2 	bl	8001354 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BR_8;
 80003b0:	e7e6      	b.n	8000380 <vLed1Task+0x8>
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	48000800 	.word	0x48000800

080003b8 <vLed2Task>:
	}
}

void vLed2Task(void* argument)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GPIOC->BSRR |= GPIO_BSRR_BS_9;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <vLed2Task+0x3c>)
 80003c2:	699a      	ldr	r2, [r3, #24]
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <vLed2Task+0x3c>)
 80003c6:	2180      	movs	r1, #128	; 0x80
 80003c8:	0089      	lsls	r1, r1, #2
 80003ca:	430a      	orrs	r2, r1
 80003cc:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 80003ce:	23fa      	movs	r3, #250	; 0xfa
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	0018      	movs	r0, r3
 80003d4:	f000 ffbe 	bl	8001354 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BR_9;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <vLed2Task+0x3c>)
 80003da:	699a      	ldr	r2, [r3, #24]
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <vLed2Task+0x3c>)
 80003de:	2180      	movs	r1, #128	; 0x80
 80003e0:	0489      	lsls	r1, r1, #18
 80003e2:	430a      	orrs	r2, r1
 80003e4:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 80003e6:	23fa      	movs	r3, #250	; 0xfa
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 ffb2 	bl	8001354 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BS_9;
 80003f0:	e7e6      	b.n	80003c0 <vLed2Task+0x8>
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	48000800 	.word	0x48000800

080003f8 <GPIO_init>:
	}
}


void GPIO_init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <GPIO_init+0x68>)
 80003fe:	695a      	ldr	r2, [r3, #20]
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <GPIO_init+0x68>)
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	0309      	lsls	r1, r1, #12
 8000406:	430a      	orrs	r2, r1
 8000408:	615a      	str	r2, [r3, #20]

	//PC8 configuration
	GPIOC->MODER |= GPIO_MODER_MODER8_0;	//General Purpose output mode
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <GPIO_init+0x6c>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <GPIO_init+0x6c>)
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	0249      	lsls	r1, r1, #9
 8000414:	430a      	orrs	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_8;		//push-pull
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <GPIO_init+0x6c>)
 800041a:	685a      	ldr	r2, [r3, #4]
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <GPIO_init+0x6c>)
 800041e:	4912      	ldr	r1, [pc, #72]	; (8000468 <GPIO_init+0x70>)
 8000420:	400a      	ands	r2, r1
 8000422:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_0; // medium speed
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <GPIO_init+0x6c>)
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <GPIO_init+0x6c>)
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	0249      	lsls	r1, r1, #9
 800042e:	430a      	orrs	r2, r1
 8000430:	609a      	str	r2, [r3, #8]
	//PC9 configuration
	GPIOC->MODER |= GPIO_MODER_MODER9_0;	//General Purpose output mode
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <GPIO_init+0x6c>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <GPIO_init+0x6c>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	02c9      	lsls	r1, r1, #11
 800043c:	430a      	orrs	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_9;		//push-pull
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <GPIO_init+0x6c>)
 8000442:	685a      	ldr	r2, [r3, #4]
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <GPIO_init+0x6c>)
 8000446:	4909      	ldr	r1, [pc, #36]	; (800046c <GPIO_init+0x74>)
 8000448:	400a      	ands	r2, r1
 800044a:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0; // medium speed
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <GPIO_init+0x6c>)
 800044e:	689a      	ldr	r2, [r3, #8]
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <GPIO_init+0x6c>)
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	02c9      	lsls	r1, r1, #11
 8000456:	430a      	orrs	r2, r1
 8000458:	609a      	str	r2, [r3, #8]
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000
 8000464:	48000800 	.word	0x48000800
 8000468:	fffffeff 	.word	0xfffffeff
 800046c:	fffffdff 	.word	0xfffffdff

08000470 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2207      	movs	r2, #7
 8000480:	4013      	ands	r3, r2
 8000482:	d004      	beq.n	800048e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2207      	movs	r2, #7
 8000488:	4393      	bics	r3, r2
 800048a:	3308      	adds	r3, #8
 800048c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800048e:	f000 ffc3 	bl	8001418 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <pvPortMalloc+0x7c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d105      	bne.n	80004a6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <pvPortMalloc+0x80>)
 800049c:	2207      	movs	r2, #7
 800049e:	4393      	bics	r3, r2
 80004a0:	001a      	movs	r2, r3
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <pvPortMalloc+0x7c>)
 80004a4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <pvPortMalloc+0x84>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	18d3      	adds	r3, r2, r3
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <pvPortMalloc+0x88>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d813      	bhi.n	80004dc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <pvPortMalloc+0x84>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	18d2      	adds	r2, r2, r3
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <pvPortMalloc+0x84>)
 80004be:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d90b      	bls.n	80004dc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <pvPortMalloc+0x7c>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <pvPortMalloc+0x84>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <pvPortMalloc+0x84>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	18d2      	adds	r2, r2, r3
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <pvPortMalloc+0x84>)
 80004da:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80004dc:	f000 ffa8 	bl	8001430 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b004      	add	sp, #16
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20001828 	.word	0x20001828
 80004f0:	2000002c 	.word	0x2000002c
 80004f4:	20001824 	.word	0x20001824
 80004f8:	000017f7 	.word	0x000017f7

080004fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <vPortFree+0x12>
 800050a:	b672      	cpsid	i
 800050c:	e7fe      	b.n	800050c <vPortFree+0x10>
}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b002      	add	sp, #8
 8000514:	bd80      	pop	{r7, pc}

08000516 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3308      	adds	r3, #8
 8000522:	001a      	movs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2201      	movs	r2, #1
 800052c:	4252      	negs	r2, r2
 800052e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3308      	adds	r3, #8
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	001a      	movs	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}

08000552 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b082      	sub	sp, #8
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}

08000568 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	683a      	ldr	r2, [r7, #0]
 800058c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b004      	add	sp, #16
 80005aa:	bd80      	pop	{r7, pc}

080005ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3301      	adds	r3, #1
 80005c0:	d103      	bne.n	80005ca <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e00c      	b.n	80005e4 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3308      	adds	r3, #8
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e002      	b.n	80005d8 <vListInsert+0x2c>
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d2f6      	bcs.n	80005d2 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}

08000618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6892      	ldr	r2, [r2, #8]
 800062e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	6852      	ldr	r2, [r2, #4]
 8000638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d103      	bne.n	800064c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b004      	add	sp, #16
 8000666:	bd80      	pop	{r7, pc}

08000668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3b04      	subs	r3, #4
 8000678:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0452      	lsls	r2, r2, #17
 8000680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3b04      	subs	r3, #4
 8000686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3b04      	subs	r3, #4
 8000692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <pxPortInitialiseStack+0x50>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3b14      	subs	r3, #20
 800069e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3b20      	subs	r3, #32
 80006aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80006ac:	68fb      	ldr	r3, [r7, #12]
}
 80006ae:	0018      	movs	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b004      	add	sp, #16
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	080006bd 	.word	0x080006bd

080006bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <prvTaskExitError+0x28>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	d001      	beq.n	80006d2 <prvTaskExitError+0x16>
 80006ce:	b672      	cpsid	i
 80006d0:	e7fe      	b.n	80006d0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80006d2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0fc      	beq.n	80006d6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004
	...

080006f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <pxCurrentTCBConst2>)
 80006f2:	6813      	ldr	r3, [r2, #0]
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	3020      	adds	r0, #32
 80006f8:	f380 8809 	msr	PSP, r0
 80006fc:	2002      	movs	r0, #2
 80006fe:	f380 8814 	msr	CONTROL, r0
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8000708:	46ae      	mov	lr, r5
 800070a:	bc08      	pop	{r3}
 800070c:	bc04      	pop	{r2}
 800070e:	b662      	cpsie	i
 8000710:	4718      	bx	r3
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46c0      	nop			; (mov r8, r8)

08000720 <pxCurrentTCBConst2>:
 8000720:	2000182c 	.word	0x2000182c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46c0      	nop			; (mov r8, r8)

08000728 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <xPortStartScheduler+0x40>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <xPortStartScheduler+0x40>)
 8000732:	21ff      	movs	r1, #255	; 0xff
 8000734:	0409      	lsls	r1, r1, #16
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <xPortStartScheduler+0x40>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <xPortStartScheduler+0x40>)
 8000740:	21ff      	movs	r1, #255	; 0xff
 8000742:	0609      	lsls	r1, r1, #24
 8000744:	430a      	orrs	r2, r1
 8000746:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000748:	f000 f898 	bl	800087c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <xPortStartScheduler+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8000752:	f7ff ffcd 	bl	80006f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000756:	f000 ffb5 	bl	80016c4 <vTaskSwitchContext>
	prvTaskExitError();
 800075a:	f7ff ffaf 	bl	80006bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800075e:	2300      	movs	r3, #0
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	e000ed20 	.word	0xe000ed20
 800076c:	20000004 	.word	0x20000004

08000770 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <vPortYield+0x1c>)
 8000776:	2280      	movs	r2, #128	; 0x80
 8000778:	0552      	lsls	r2, r2, #21
 800077a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800077c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8000780:	f3bf 8f6f 	isb	sy
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	e000ed04 	.word	0xe000ed04

08000790 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8000794:	b672      	cpsid	i
	uxCriticalNesting++;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <vPortEnterCritical+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <vPortEnterCritical+0x20>)
 800079e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80007a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80007a4:	f3bf 8f6f 	isb	sy
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000004 	.word	0x20000004

080007b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <vPortExitCritical+0x2c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d101      	bne.n	80007c4 <vPortExitCritical+0x10>
 80007c0:	b672      	cpsid	i
 80007c2:	e7fe      	b.n	80007c2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <vPortExitCritical+0x2c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <vPortExitCritical+0x2c>)
 80007cc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <vPortExitCritical+0x2c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d100      	bne.n	80007d8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80007d6:	b662      	cpsie	i
	}
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000004 	.word	0x20000004

080007e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80007e4:	f3ef 8010 	mrs	r0, PRIMASK
 80007e8:	b672      	cpsid	i
 80007ea:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	0018      	movs	r0, r3

080007f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80007f0:	f380 8810 	msr	PRIMASK, r0
 80007f4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80007f6:	46c0      	nop			; (mov r8, r8)
	...

08000800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000800:	f3ef 8009 	mrs	r0, PSP
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <pxCurrentTCBConst>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	3820      	subs	r0, #32
 800080a:	6010      	str	r0, [r2, #0]
 800080c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800080e:	4644      	mov	r4, r8
 8000810:	464d      	mov	r5, r9
 8000812:	4656      	mov	r6, sl
 8000814:	465f      	mov	r7, fp
 8000816:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8000818:	b508      	push	{r3, lr}
 800081a:	b672      	cpsid	i
 800081c:	f000 ff52 	bl	80016c4 <vTaskSwitchContext>
 8000820:	b662      	cpsie	i
 8000822:	bc0c      	pop	{r2, r3}
 8000824:	6811      	ldr	r1, [r2, #0]
 8000826:	6808      	ldr	r0, [r1, #0]
 8000828:	3010      	adds	r0, #16
 800082a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800082c:	46a0      	mov	r8, r4
 800082e:	46a9      	mov	r9, r5
 8000830:	46b2      	mov	sl, r6
 8000832:	46bb      	mov	fp, r7
 8000834:	f380 8809 	msr	PSP, r0
 8000838:	3820      	subs	r0, #32
 800083a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800083c:	4718      	bx	r3
 800083e:	46c0      	nop			; (mov r8, r8)

08000840 <pxCurrentTCBConst>:
 8000840:	2000182c 	.word	0x2000182c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46c0      	nop			; (mov r8, r8)

08000848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800084e:	f7ff ffc9 	bl	80007e4 <ulSetInterruptMaskFromISR>
 8000852:	0003      	movs	r3, r0
 8000854:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000856:	f000 fe85 	bl	8001564 <xTaskIncrementTick>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d003      	beq.n	8000866 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SysTick_Handler+0x30>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0552      	lsls	r2, r2, #21
 8000864:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ffc1 	bl	80007f0 <vClearInterruptMaskFromISR>
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	e000ed04 	.word	0xe000ed04

0800087c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <vPortSetupTimerInterrupt+0x34>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <vPortSetupTimerInterrupt+0x38>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <vPortSetupTimerInterrupt+0x3c>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	23fa      	movs	r3, #250	; 0xfa
 8000892:	0099      	lsls	r1, r3, #2
 8000894:	0010      	movs	r0, r2
 8000896:	f7ff fc37 	bl	8000108 <__udivsi3>
 800089a:	0003      	movs	r3, r0
 800089c:	001a      	movs	r2, r3
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <vPortSetupTimerInterrupt+0x40>)
 80008a0:	3a01      	subs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <vPortSetupTimerInterrupt+0x34>)
 80008a6:	2207      	movs	r2, #7
 80008a8:	601a      	str	r2, [r3, #0]
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	e000e010 	.word	0xe000e010
 80008b4:	e000e018 	.word	0xe000e018
 80008b8:	20000000 	.word	0x20000000
 80008bc:	e000e014 	.word	0xe000e014

080008c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <xQueueGenericReset+0x18>
 80008d4:	b672      	cpsid	i
 80008d6:	e7fe      	b.n	80008d6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80008d8:	f7ff ff5a 	bl	8000790 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	434b      	muls	r3, r1
 80008ea:	18d2      	adds	r2, r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2200      	movs	r2, #0
 80008f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000906:	1e59      	subs	r1, r3, #1
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	434b      	muls	r3, r1
 800090e:	18d2      	adds	r2, r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2244      	movs	r2, #68	; 0x44
 8000918:	21ff      	movs	r1, #255	; 0xff
 800091a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2245      	movs	r2, #69	; 0x45
 8000920:	21ff      	movs	r1, #255	; 0xff
 8000922:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10d      	bne.n	8000946 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d013      	beq.n	800095a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3310      	adds	r3, #16
 8000936:	0018      	movs	r0, r3
 8000938:	f000 ff5a 	bl	80017f0 <xTaskRemoveFromEventList>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d00c      	beq.n	800095a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000940:	f7ff ff16 	bl	8000770 <vPortYield>
 8000944:	e009      	b.n	800095a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3310      	adds	r3, #16
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fde3 	bl	8000516 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3324      	adds	r3, #36	; 0x24
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fdde 	bl	8000516 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800095a:	f7ff ff2b 	bl	80007b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800095e:	2301      	movs	r3, #1
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}

08000968 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af02      	add	r7, sp, #8
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <xQueueGenericCreate+0x18>
 800097c:	b672      	cpsid	i
 800097e:	e7fe      	b.n	800097e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4353      	muls	r3, r2
 8000986:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	3350      	adds	r3, #80	; 0x50
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fd6f 	bl	8000470 <pvPortMalloc>
 8000992:	0003      	movs	r3, r0
 8000994:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00e      	beq.n	80009ba <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3350      	adds	r3, #80	; 0x50
 80009a4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781c      	ldrb	r4, [r3, #0]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	0023      	movs	r3, r4
 80009b6:	f000 f805 	bl	80009c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80009ba:	69bb      	ldr	r3, [r7, #24]
	}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b009      	add	sp, #36	; 0x24
 80009c2:	bd90      	pop	{r4, r7, pc}

080009c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	001a      	movs	r2, r3
 80009d2:	1cfb      	adds	r3, r7, #3
 80009d4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d103      	bne.n	80009e4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e002      	b.n	80009ea <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	2101      	movs	r1, #1
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff ff60 	bl	80008c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	1cfa      	adds	r2, r7, #3
 8000a04:	214c      	movs	r1, #76	; 0x4c
 8000a06:	7812      	ldrb	r2, [r2, #0]
 8000a08:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b08a      	sub	sp, #40	; 0x28
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <xQueueGenericSend+0x20>
 8000a2e:	b672      	cpsid	i
 8000a30:	e7fe      	b.n	8000a30 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d103      	bne.n	8000a40 <xQueueGenericSend+0x2e>
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <xQueueGenericSend+0x32>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <xQueueGenericSend+0x34>
 8000a44:	2300      	movs	r3, #0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <xQueueGenericSend+0x3c>
 8000a4a:	b672      	cpsid	i
 8000a4c:	e7fe      	b.n	8000a4c <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d103      	bne.n	8000a5c <xQueueGenericSend+0x4a>
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d101      	bne.n	8000a60 <xQueueGenericSend+0x4e>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <xQueueGenericSend+0x50>
 8000a60:	2300      	movs	r3, #0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <xQueueGenericSend+0x58>
 8000a66:	b672      	cpsid	i
 8000a68:	e7fe      	b.n	8000a68 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a6a:	f001 f83d 	bl	8001ae8 <xTaskGetSchedulerState>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d102      	bne.n	8000a78 <xQueueGenericSend+0x66>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <xQueueGenericSend+0x6a>
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e000      	b.n	8000a7e <xQueueGenericSend+0x6c>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <xQueueGenericSend+0x74>
 8000a82:	b672      	cpsid	i
 8000a84:	e7fe      	b.n	8000a84 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000a86:	f7ff fe83 	bl	8000790 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a8a:	6a3b      	ldr	r3, [r7, #32]
 8000a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d302      	bcc.n	8000a9c <xQueueGenericSend+0x8a>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d11e      	bne.n	8000ada <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	68b9      	ldr	r1, [r7, #8]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f9a2 	bl	8000dec <prvCopyDataToQueue>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	3324      	adds	r3, #36	; 0x24
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fe99 	bl	80017f0 <xTaskRemoveFromEventList>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d007      	beq.n	8000ad2 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000ac2:	f7ff fe55 	bl	8000770 <vPortYield>
 8000ac6:	e004      	b.n	8000ad2 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000ace:	f7ff fe4f 	bl	8000770 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ad2:	f7ff fe6f 	bl	80007b4 <vPortExitCritical>
				return pdPASS;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e05b      	b.n	8000b92 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ae0:	f7ff fe68 	bl	80007b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e054      	b.n	8000b92 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d106      	bne.n	8000afc <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000aee:	2314      	movs	r3, #20
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fed8 	bl	80018a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000af8:	2301      	movs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000afc:	f7ff fe5a 	bl	80007b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000b00:	f000 fc8a 	bl	8001418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000b04:	f7ff fe44 	bl	8000790 <vPortEnterCritical>
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	2244      	movs	r2, #68	; 0x44
 8000b0c:	5c9b      	ldrb	r3, [r3, r2]
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	3301      	adds	r3, #1
 8000b12:	d103      	bne.n	8000b1c <xQueueGenericSend+0x10a>
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	5499      	strb	r1, [r3, r2]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	2245      	movs	r2, #69	; 0x45
 8000b20:	5c9b      	ldrb	r3, [r3, r2]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	3301      	adds	r3, #1
 8000b26:	d103      	bne.n	8000b30 <xQueueGenericSend+0x11e>
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2245      	movs	r2, #69	; 0x45
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5499      	strb	r1, [r3, r2]
 8000b30:	f7ff fe40 	bl	80007b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b34:	1d3a      	adds	r2, r7, #4
 8000b36:	2314      	movs	r3, #20
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fec7 	bl	80018d0 <xTaskCheckForTimeOut>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d11e      	bne.n	8000b84 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fa54 	bl	8000ff6 <prvIsQueueFull>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d011      	beq.n	8000b76 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	3310      	adds	r3, #16
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	0011      	movs	r1, r2
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fe04 	bl	8001768 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f9d3 	bl	8000f0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000b68:	f000 fc62 	bl	8001430 <xTaskResumeAll>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d18a      	bne.n	8000a86 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8000b70:	f7ff fdfe 	bl	8000770 <vPortYield>
 8000b74:	e787      	b.n	8000a86 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 f9c8 	bl	8000f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b7e:	f000 fc57 	bl	8001430 <xTaskResumeAll>
 8000b82:	e780      	b.n	8000a86 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 f9c1 	bl	8000f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b8c:	f000 fc50 	bl	8001430 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b90:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b00a      	add	sp, #40	; 0x28
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b9a:	b590      	push	{r4, r7, lr}
 8000b9c:	b08b      	sub	sp, #44	; 0x2c
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <xQueueGenericSendFromISR+0x1c>
 8000bb2:	b672      	cpsid	i
 8000bb4:	e7fe      	b.n	8000bb4 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <xQueueGenericSendFromISR+0x2a>
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <xQueueGenericSendFromISR+0x2e>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <xQueueGenericSendFromISR+0x30>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <xQueueGenericSendFromISR+0x38>
 8000bce:	b672      	cpsid	i
 8000bd0:	e7fe      	b.n	8000bd0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d103      	bne.n	8000be0 <xQueueGenericSendFromISR+0x46>
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d101      	bne.n	8000be4 <xQueueGenericSendFromISR+0x4a>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <xQueueGenericSendFromISR+0x4c>
 8000be4:	2300      	movs	r3, #0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <xQueueGenericSendFromISR+0x54>
 8000bea:	b672      	cpsid	i
 8000bec:	e7fe      	b.n	8000bec <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bee:	f7ff fdf9 	bl	80007e4 <ulSetInterruptMaskFromISR>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d302      	bcc.n	8000c08 <xQueueGenericSendFromISR+0x6e>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d131      	bne.n	8000c6c <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000c08:	241b      	movs	r4, #27
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	6a3a      	ldr	r2, [r7, #32]
 8000c0e:	2145      	movs	r1, #69	; 0x45
 8000c10:	5c52      	ldrb	r2, [r2, r1]
 8000c12:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c18:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 f8e3 	bl	8000dec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	d111      	bne.n	8000c54 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d016      	beq.n	8000c66 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	3324      	adds	r3, #36	; 0x24
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 fdd7 	bl	80017f0 <xTaskRemoveFromEventList>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d00f      	beq.n	8000c66 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00c      	beq.n	8000c66 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	e008      	b.n	8000c66 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c54:	231b      	movs	r3, #27
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	b259      	sxtb	r1, r3
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	2245      	movs	r2, #69	; 0x45
 8000c64:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8000c66:	2301      	movs	r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8000c6a:	e001      	b.n	8000c70 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	0018      	movs	r0, r3
 8000c74:	f7ff fdbc 	bl	80007f0 <vClearInterruptMaskFromISR>

	return xReturn;
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b00b      	add	sp, #44	; 0x2c
 8000c80:	bd90      	pop	{r4, r7, pc}

08000c82 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b08a      	sub	sp, #40	; 0x28
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <xQueueReceive+0x1e>
 8000c9c:	b672      	cpsid	i
 8000c9e:	e7fe      	b.n	8000c9e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <xQueueReceive+0x2c>
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <xQueueReceive+0x30>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <xQueueReceive+0x32>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <xQueueReceive+0x3a>
 8000cb8:	b672      	cpsid	i
 8000cba:	e7fe      	b.n	8000cba <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cbc:	f000 ff14 	bl	8001ae8 <xTaskGetSchedulerState>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d102      	bne.n	8000cca <xQueueReceive+0x48>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <xQueueReceive+0x4c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <xQueueReceive+0x4e>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <xQueueReceive+0x56>
 8000cd4:	b672      	cpsid	i
 8000cd6:	e7fe      	b.n	8000cd6 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000cd8:	f7ff fd5a 	bl	8000790 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d01a      	beq.n	8000d1e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	0011      	movs	r1, r2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f8e7 	bl	8000ec2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d008      	beq.n	8000d16 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	3310      	adds	r3, #16
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fd71 	bl	80017f0 <xTaskRemoveFromEventList>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000d12:	f7ff fd2d 	bl	8000770 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000d16:	f7ff fd4d 	bl	80007b4 <vPortExitCritical>
				return pdPASS;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e062      	b.n	8000de4 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d24:	f7ff fd46 	bl	80007b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e05b      	b.n	8000de4 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d106      	bne.n	8000d40 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000d32:	2314      	movs	r3, #20
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fdb6 	bl	80018a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d40:	f7ff fd38 	bl	80007b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d44:	f000 fb68 	bl	8001418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000d48:	f7ff fd22 	bl	8000790 <vPortEnterCritical>
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	2244      	movs	r2, #68	; 0x44
 8000d50:	5c9b      	ldrb	r3, [r3, r2]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	3301      	adds	r3, #1
 8000d56:	d103      	bne.n	8000d60 <xQueueReceive+0xde>
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	2244      	movs	r2, #68	; 0x44
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	5499      	strb	r1, [r3, r2]
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2245      	movs	r2, #69	; 0x45
 8000d64:	5c9b      	ldrb	r3, [r3, r2]
 8000d66:	b25b      	sxtb	r3, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	d103      	bne.n	8000d74 <xQueueReceive+0xf2>
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	2245      	movs	r2, #69	; 0x45
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]
 8000d74:	f7ff fd1e 	bl	80007b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d78:	1d3a      	adds	r2, r7, #4
 8000d7a:	2314      	movs	r3, #20
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fda5 	bl	80018d0 <xTaskCheckForTimeOut>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d11e      	bne.n	8000dc8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 f91c 	bl	8000fca <prvIsQueueEmpty>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d011      	beq.n	8000dba <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	3324      	adds	r3, #36	; 0x24
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fce2 	bl	8001768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8b1 	bl	8000f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000dac:	f000 fb40 	bl	8001430 <xTaskResumeAll>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d191      	bne.n	8000cd8 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8000db4:	f7ff fcdc 	bl	8000770 <vPortYield>
 8000db8:	e78e      	b.n	8000cd8 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 f8a6 	bl	8000f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000dc2:	f000 fb35 	bl	8001430 <xTaskResumeAll>
 8000dc6:	e787      	b.n	8000cd8 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 f89f 	bl	8000f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000dd0:	f000 fb2e 	bl	8001430 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 f8f7 	bl	8000fca <prvIsQueueEmpty>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d100      	bne.n	8000de2 <xQueueReceive+0x160>
 8000de0:	e77a      	b.n	8000cd8 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000de2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b00a      	add	sp, #40	; 0x28
 8000dea:	bd80      	pop	{r7, pc}

08000dec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10e      	bne.n	8000e28 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14e      	bne.n	8000eb0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fe82 	bl	8001b20 <xTaskPriorityDisinherit>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	e043      	b.n	8000eb0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d119      	bne.n	8000e62 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0019      	movs	r1, r3
 8000e3a:	f001 fa53 	bl	80022e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d32b      	bcc.n	8000eb0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	e026      	b.n	8000eb0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68d8      	ldr	r0, [r3, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	f001 fa39 	bl	80022e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	18d2      	adds	r2, r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d207      	bcs.n	8000e9e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	425b      	negs	r3, r3
 8000e98:	18d2      	adds	r2, r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d105      	bne.n	8000eb0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000eb8:	697b      	ldr	r3, [r7, #20]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d018      	beq.n	8000f06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	18d2      	adds	r2, r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d303      	bcc.n	8000ef6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 f9ef 	bl	80022e4 <memcpy>
	}
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000f16:	f7ff fc3b 	bl	8000790 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	2145      	movs	r1, #69	; 0x45
 8000f22:	5c52      	ldrb	r2, [r2, r1]
 8000f24:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f26:	e013      	b.n	8000f50 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3324      	adds	r3, #36	; 0x24
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fc5b 	bl	80017f0 <xTaskRemoveFromEventList>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000f3e:	f000 fd17 	bl	8001970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000f42:	210f      	movs	r1, #15
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dce5      	bgt.n	8000f28 <prvUnlockQueue+0x1a>
 8000f5c:	e000      	b.n	8000f60 <prvUnlockQueue+0x52>
					break;
 8000f5e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2245      	movs	r2, #69	; 0x45
 8000f64:	21ff      	movs	r1, #255	; 0xff
 8000f66:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8000f68:	f7ff fc24 	bl	80007b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000f6c:	f7ff fc10 	bl	8000790 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000f70:	230e      	movs	r3, #14
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	2144      	movs	r1, #68	; 0x44
 8000f78:	5c52      	ldrb	r2, [r2, r1]
 8000f7a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f7c:	e013      	b.n	8000fa6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d016      	beq.n	8000fb4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3310      	adds	r3, #16
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fc30 	bl	80017f0 <xTaskRemoveFromEventList>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8000f94:	f000 fcec 	bl	8001970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000f98:	210e      	movs	r1, #14
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000fa6:	230e      	movs	r3, #14
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dce5      	bgt.n	8000f7e <prvUnlockQueue+0x70>
 8000fb2:	e000      	b.n	8000fb6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8000fb4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2244      	movs	r2, #68	; 0x44
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8000fbe:	f7ff fbf9 	bl	80007b4 <vPortExitCritical>
}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000fd2:	f7ff fbdd 	bl	8000790 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	e001      	b.n	8000fe8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000fe8:	f7ff fbe4 	bl	80007b4 <vPortExitCritical>

	return xReturn;
 8000fec:	68fb      	ldr	r3, [r7, #12]
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ffe:	f7ff fbc7 	bl	8000790 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100a:	429a      	cmp	r2, r3
 800100c:	d102      	bne.n	8001014 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800100e:	2301      	movs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e001      	b.n	8001018 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001018:	f7ff fbcc 	bl	80007b4 <vPortExitCritical>

	return xReturn;
 800101c:	68fb      	ldr	r3, [r7, #12]
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e015      	b.n	8001064 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <vQueueAddToRegistry+0x4c>)
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	00d2      	lsls	r2, r2, #3
 800103e:	58d3      	ldr	r3, [r2, r3]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10c      	bne.n	800105e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <vQueueAddToRegistry+0x4c>)
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	00d2      	lsls	r2, r2, #3
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <vQueueAddToRegistry+0x4c>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	3304      	adds	r3, #4
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800105c:	e005      	b.n	800106a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b07      	cmp	r3, #7
 8001068:	d9e6      	bls.n	8001038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	2000196c 	.word	0x2000196c

08001078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001088:	f7ff fb82 	bl	8000790 <vPortEnterCritical>
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2244      	movs	r2, #68	; 0x44
 8001090:	5c9b      	ldrb	r3, [r3, r2]
 8001092:	b25b      	sxtb	r3, r3
 8001094:	3301      	adds	r3, #1
 8001096:	d103      	bne.n	80010a0 <vQueueWaitForMessageRestricted+0x28>
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2244      	movs	r2, #68	; 0x44
 800109c:	2100      	movs	r1, #0
 800109e:	5499      	strb	r1, [r3, r2]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2245      	movs	r2, #69	; 0x45
 80010a4:	5c9b      	ldrb	r3, [r3, r2]
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	3301      	adds	r3, #1
 80010aa:	d103      	bne.n	80010b4 <vQueueWaitForMessageRestricted+0x3c>
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2245      	movs	r2, #69	; 0x45
 80010b0:	2100      	movs	r1, #0
 80010b2:	5499      	strb	r1, [r3, r2]
 80010b4:	f7ff fb7e 	bl	80007b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d106      	bne.n	80010ce <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3324      	adds	r3, #36	; 0x24
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 fb6b 	bl	80017a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff1c 	bl	8000f0e <prvUnlockQueue>
	}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b006      	add	sp, #24
 80010dc:	bd80      	pop	{r7, pc}

080010de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80010de:	b590      	push	{r4, r7, lr}
 80010e0:	b08d      	sub	sp, #52	; 0x34
 80010e2:	af04      	add	r7, sp, #16
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f9bb 	bl	8000470 <pvPortMalloc>
 80010fa:	0003      	movs	r3, r0
 80010fc:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d010      	beq.n	8001126 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001104:	2054      	movs	r0, #84	; 0x54
 8001106:	f7ff f9b3 	bl	8000470 <pvPortMalloc>
 800110a:	0003      	movs	r3, r0
 800110c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
 800111a:	e006      	b.n	800112a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	0018      	movs	r0, r3
 8001120:	f7ff f9ec 	bl	80004fc <vPortFree>
 8001124:	e001      	b.n	800112a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d016      	beq.n	800115e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	881a      	ldrh	r2, [r3, #0]
 8001134:	683c      	ldr	r4, [r7, #0]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	2300      	movs	r3, #0
 800113c:	9303      	str	r3, [sp, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	9302      	str	r3, [sp, #8]
 8001142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	0023      	movs	r3, r4
 800114c:	f000 f810 	bl	8001170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	0018      	movs	r0, r3
 8001154:	f000 f896 	bl	8001284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	e002      	b.n	8001164 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800115e:	2301      	movs	r3, #1
 8001160:	425b      	negs	r3, r3
 8001162:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001164:	69bb      	ldr	r3, [r7, #24]
	}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b009      	add	sp, #36	; 0x24
 800116c:	bd90      	pop	{r4, r7, pc}
	...

08001170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	001a      	movs	r2, r3
 8001188:	21a5      	movs	r1, #165	; 0xa5
 800118a:	f001 f8b4 	bl	80022f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	493a      	ldr	r1, [pc, #232]	; (8001280 <prvInitialiseNewTask+0x110>)
 8001196:	468c      	mov	ip, r1
 8001198:	4463      	add	r3, ip
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2207      	movs	r2, #7
 80011a4:	4393      	bics	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2207      	movs	r2, #7
 80011ac:	4013      	ands	r3, r2
 80011ae:	d001      	beq.n	80011b4 <prvInitialiseNewTask+0x44>
 80011b0:	b672      	cpsid	i
 80011b2:	e7fe      	b.n	80011b2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d020      	beq.n	80011fc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e013      	b.n	80011e8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	7818      	ldrb	r0, [r3, #0]
 80011c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ca:	2134      	movs	r1, #52	; 0x34
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	18d3      	adds	r3, r2, r3
 80011d0:	185b      	adds	r3, r3, r1
 80011d2:	1c02      	adds	r2, r0, #0
 80011d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	18d3      	adds	r3, r2, r3
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d9e8      	bls.n	80011c0 <prvInitialiseNewTask+0x50>
 80011ee:	e000      	b.n	80011f2 <prvInitialiseNewTask+0x82>
			{
				break;
 80011f0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	2238      	movs	r2, #56	; 0x38
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]
 80011fa:	e003      	b.n	8001204 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	2234      	movs	r2, #52	; 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d901      	bls.n	800120e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800120a:	2304      	movs	r3, #4
 800120c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	6a3a      	ldr	r2, [r7, #32]
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	2200      	movs	r2, #0
 800121e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	3304      	adds	r3, #4
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff f994 	bl	8000552 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	3318      	adds	r3, #24
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff f98f 	bl	8000552 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001238:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	2205      	movs	r2, #5
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	2200      	movs	r2, #0
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001252:	2250      	movs	r2, #80	; 0x50
 8001254:	2100      	movs	r1, #0
 8001256:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fa02 	bl	8000668 <pxPortInitialiseStack>
 8001264:	0002      	movs	r2, r0
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b006      	add	sp, #24
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	3fffffff 	.word	0x3fffffff

08001284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800128c:	f7ff fa80 	bl	8000790 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <prvAddNewTaskToReadyList+0xb8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <prvAddNewTaskToReadyList+0xb8>)
 8001298:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <prvAddNewTaskToReadyList+0xbc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <prvAddNewTaskToReadyList+0xbc>)
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <prvAddNewTaskToReadyList+0xb8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d110      	bne.n	80012d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80012b0:	f000 fb78 	bl	80019a4 <prvInitialiseTaskLists>
 80012b4:	e00d      	b.n	80012d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <prvAddNewTaskToReadyList+0xc0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <prvAddNewTaskToReadyList+0xbc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d802      	bhi.n	80012d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <prvAddNewTaskToReadyList+0xbc>)
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <prvAddNewTaskToReadyList+0xc4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <prvAddNewTaskToReadyList+0xc4>)
 80012da:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <prvAddNewTaskToReadyList+0xc4>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <prvAddNewTaskToReadyList+0xc8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d903      	bls.n	80012f8 <prvAddNewTaskToReadyList+0x74>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <prvAddNewTaskToReadyList+0xc8>)
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fc:	0013      	movs	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	189b      	adds	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <prvAddNewTaskToReadyList+0xcc>)
 8001306:	189a      	adds	r2, r3, r2
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3304      	adds	r3, #4
 800130c:	0019      	movs	r1, r3
 800130e:	0010      	movs	r0, r2
 8001310:	f7ff f92a 	bl	8000568 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001314:	f7ff fa4e 	bl	80007b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <prvAddNewTaskToReadyList+0xc0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <prvAddNewTaskToReadyList+0xbc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	429a      	cmp	r2, r3
 800132c:	d201      	bcs.n	8001332 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800132e:	f7ff fa1f 	bl	8000770 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	20001904 	.word	0x20001904
 8001340:	2000182c 	.word	0x2000182c
 8001344:	20001910 	.word	0x20001910
 8001348:	20001920 	.word	0x20001920
 800134c:	2000190c 	.word	0x2000190c
 8001350:	20001830 	.word	0x20001830

08001354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d010      	beq.n	8001388 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <vTaskDelay+0x48>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <vTaskDelay+0x1e>
 800136e:	b672      	cpsid	i
 8001370:	e7fe      	b.n	8001370 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8001372:	f000 f851 	bl	8001418 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2100      	movs	r1, #0
 800137a:	0018      	movs	r0, r3
 800137c:	f000 fc2c 	bl	8001bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001380:	f000 f856 	bl	8001430 <xTaskResumeAll>
 8001384:	0003      	movs	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800138e:	f7ff f9ef 	bl	8000770 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	2000192c 	.word	0x2000192c

080013a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80013a6:	4916      	ldr	r1, [pc, #88]	; (8001400 <vTaskStartScheduler+0x60>)
 80013a8:	4816      	ldr	r0, [pc, #88]	; (8001404 <vTaskStartScheduler+0x64>)
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <vTaskStartScheduler+0x68>)
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2246      	movs	r2, #70	; 0x46
 80013b6:	f7ff fe92 	bl	80010de <xTaskCreate>
 80013ba:	0003      	movs	r3, r0
 80013bc:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d103      	bne.n	80013cc <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 80013c4:	f000 fc5c 	bl	8001c80 <xTimerCreateTimerTask>
 80013c8:	0003      	movs	r3, r0
 80013ca:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10d      	bne.n	80013ee <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80013d2:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <vTaskStartScheduler+0x6c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	4252      	negs	r2, r2
 80013da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <vTaskStartScheduler+0x70>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <vTaskStartScheduler+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80013e8:	f7ff f99e 	bl	8000728 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80013ec:	e004      	b.n	80013f8 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3301      	adds	r3, #1
 80013f2:	d101      	bne.n	80013f8 <vTaskStartScheduler+0x58>
 80013f4:	b672      	cpsid	i
 80013f6:	e7fe      	b.n	80013f6 <vTaskStartScheduler+0x56>
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	08002324 	.word	0x08002324
 8001404:	08001985 	.word	0x08001985
 8001408:	20001928 	.word	0x20001928
 800140c:	20001924 	.word	0x20001924
 8001410:	20001910 	.word	0x20001910
 8001414:	20001908 	.word	0x20001908

08001418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <vTaskSuspendAll+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	4b02      	ldr	r3, [pc, #8]	; (800142c <vTaskSuspendAll+0x14>)
 8001424:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000192c 	.word	0x2000192c

08001430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <xTaskResumeAll+0xf8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <xTaskResumeAll+0x1a>
 8001446:	b672      	cpsid	i
 8001448:	e7fe      	b.n	8001448 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800144a:	f7ff f9a1 	bl	8000790 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <xTaskResumeAll+0xf8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	4b34      	ldr	r3, [pc, #208]	; (8001528 <xTaskResumeAll+0xf8>)
 8001456:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <xTaskResumeAll+0xf8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d15b      	bne.n	8001518 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <xTaskResumeAll+0xfc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d057      	beq.n	8001518 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001468:	e02f      	b.n	80014ca <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <xTaskResumeAll+0x100>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3318      	adds	r3, #24
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff f8ce 	bl	8000618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3304      	adds	r3, #4
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff f8c9 	bl	8000618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <xTaskResumeAll+0x104>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d903      	bls.n	800149a <xTaskResumeAll+0x6a>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <xTaskResumeAll+0x104>)
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149e:	0013      	movs	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	189b      	adds	r3, r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <xTaskResumeAll+0x108>)
 80014a8:	189a      	adds	r2, r3, r2
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3304      	adds	r3, #4
 80014ae:	0019      	movs	r1, r3
 80014b0:	0010      	movs	r0, r2
 80014b2:	f7ff f859 	bl	8000568 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <xTaskResumeAll+0x10c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d302      	bcc.n	80014ca <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <xTaskResumeAll+0x110>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <xTaskResumeAll+0x100>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1cb      	bne.n	800146a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80014d8:	f000 fae8 	bl	8001aac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <xTaskResumeAll+0x114>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00f      	beq.n	8001508 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80014e8:	f000 f83c 	bl	8001564 <xTaskIncrementTick>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d002      	beq.n	80014f6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <xTaskResumeAll+0x110>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f2      	bne.n	80014e8 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <xTaskResumeAll+0x114>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <xTaskResumeAll+0x110>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001514:	f7ff f92c 	bl	8000770 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001518:	f7ff f94c 	bl	80007b4 <vPortExitCritical>

	return xAlreadyYielded;
 800151c:	68bb      	ldr	r3, [r7, #8]
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	2000192c 	.word	0x2000192c
 800152c:	20001904 	.word	0x20001904
 8001530:	200018c4 	.word	0x200018c4
 8001534:	2000190c 	.word	0x2000190c
 8001538:	20001830 	.word	0x20001830
 800153c:	2000182c 	.word	0x2000182c
 8001540:	20001918 	.word	0x20001918
 8001544:	20001914 	.word	0x20001914

08001548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <xTaskGetTickCount+0x18>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	20001908 	.word	0x20001908

08001564 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800156e:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <xTaskIncrementTick+0x134>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d000      	beq.n	8001578 <xTaskIncrementTick+0x14>
 8001576:	e084      	b.n	8001682 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <xTaskIncrementTick+0x138>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001580:	4b46      	ldr	r3, [pc, #280]	; (800169c <xTaskIncrementTick+0x138>)
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d117      	bne.n	80015bc <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800158c:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <xTaskIncrementTick+0x13c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <xTaskIncrementTick+0x36>
 8001596:	b672      	cpsid	i
 8001598:	e7fe      	b.n	8001598 <xTaskIncrementTick+0x34>
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <xTaskIncrementTick+0x13c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <xTaskIncrementTick+0x140>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <xTaskIncrementTick+0x13c>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <xTaskIncrementTick+0x140>)
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <xTaskIncrementTick+0x144>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <xTaskIncrementTick+0x144>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f000 fa78 	bl	8001aac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80015bc:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <xTaskIncrementTick+0x148>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d349      	bcc.n	800165a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <xTaskIncrementTick+0x13c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d104      	bne.n	80015da <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <xTaskIncrementTick+0x148>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	4252      	negs	r2, r2
 80015d6:	601a      	str	r2, [r3, #0]
					break;
 80015d8:	e03f      	b.n	800165a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <xTaskIncrementTick+0x13c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d203      	bcs.n	80015fa <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <xTaskIncrementTick+0x148>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80015f8:	e02f      	b.n	800165a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3304      	adds	r3, #4
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff f80a 	bl	8000618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3318      	adds	r3, #24
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff f801 	bl	8000618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <xTaskIncrementTick+0x14c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d903      	bls.n	800162a <xTaskIncrementTick+0xc6>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <xTaskIncrementTick+0x14c>)
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800162e:	0013      	movs	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	189b      	adds	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <xTaskIncrementTick+0x150>)
 8001638:	189a      	adds	r2, r3, r2
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3304      	adds	r3, #4
 800163e:	0019      	movs	r1, r3
 8001640:	0010      	movs	r0, r2
 8001642:	f7fe ff91 	bl	8000568 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <xTaskIncrementTick+0x154>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	429a      	cmp	r2, r3
 8001652:	d3b8      	bcc.n	80015c6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8001654:	2301      	movs	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001658:	e7b5      	b.n	80015c6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <xTaskIncrementTick+0x154>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001660:	4914      	ldr	r1, [pc, #80]	; (80016b4 <xTaskIncrementTick+0x150>)
 8001662:	0013      	movs	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	189b      	adds	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	585b      	ldr	r3, [r3, r1]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d901      	bls.n	8001674 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8001670:	2301      	movs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <xTaskIncrementTick+0x158>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e004      	b.n	800168c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <xTaskIncrementTick+0x15c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <xTaskIncrementTick+0x15c>)
 800168a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800168c:	697b      	ldr	r3, [r7, #20]
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b006      	add	sp, #24
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	2000192c 	.word	0x2000192c
 800169c:	20001908 	.word	0x20001908
 80016a0:	200018bc 	.word	0x200018bc
 80016a4:	200018c0 	.word	0x200018c0
 80016a8:	2000191c 	.word	0x2000191c
 80016ac:	20001924 	.word	0x20001924
 80016b0:	2000190c 	.word	0x2000190c
 80016b4:	20001830 	.word	0x20001830
 80016b8:	2000182c 	.word	0x2000182c
 80016bc:	20001918 	.word	0x20001918
 80016c0:	20001914 	.word	0x20001914

080016c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <vTaskSwitchContext+0x90>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <vTaskSwitchContext+0x94>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80016d8:	e037      	b.n	800174a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <vTaskSwitchContext+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <vTaskSwitchContext+0x98>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e007      	b.n	80016f8 <vTaskSwitchContext+0x34>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <vTaskSwitchContext+0x2e>
 80016ee:	b672      	cpsid	i
 80016f0:	e7fe      	b.n	80016f0 <vTaskSwitchContext+0x2c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4919      	ldr	r1, [pc, #100]	; (8001760 <vTaskSwitchContext+0x9c>)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	0013      	movs	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	189b      	adds	r3, r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	585b      	ldr	r3, [r3, r1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ee      	beq.n	80016e8 <vTaskSwitchContext+0x24>
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	0013      	movs	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	189b      	adds	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4a12      	ldr	r2, [pc, #72]	; (8001760 <vTaskSwitchContext+0x9c>)
 8001716:	189b      	adds	r3, r3, r2
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	3308      	adds	r3, #8
 800172c:	429a      	cmp	r2, r3
 800172e:	d104      	bne.n	800173a <vTaskSwitchContext+0x76>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <vTaskSwitchContext+0xa0>)
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <vTaskSwitchContext+0x98>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	2000192c 	.word	0x2000192c
 8001758:	20001918 	.word	0x20001918
 800175c:	2000190c 	.word	0x2000190c
 8001760:	20001830 	.word	0x20001830
 8001764:	2000182c 	.word	0x2000182c

08001768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <vTaskPlaceOnEventList+0x14>
 8001778:	b672      	cpsid	i
 800177a:	e7fe      	b.n	800177a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <vTaskPlaceOnEventList+0x38>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3318      	adds	r3, #24
 8001782:	001a      	movs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	0011      	movs	r1, r2
 8001788:	0018      	movs	r0, r3
 800178a:	f7fe ff0f 	bl	80005ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	0018      	movs	r0, r3
 8001794:	f000 fa20 	bl	8001bd8 <prvAddCurrentTaskToDelayedList>
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000182c 	.word	0x2000182c

080017a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <vTaskPlaceOnEventListRestricted+0x16>
 80017b6:	b672      	cpsid	i
 80017b8:	e7fe      	b.n	80017b8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <vTaskPlaceOnEventListRestricted+0x48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3318      	adds	r3, #24
 80017c0:	001a      	movs	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7fe fece 	bl	8000568 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80017d2:	2301      	movs	r3, #1
 80017d4:	425b      	negs	r3, r3
 80017d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	0011      	movs	r1, r2
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f9fa 	bl	8001bd8 <prvAddCurrentTaskToDelayedList>
	}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000182c 	.word	0x2000182c

080017f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <xTaskRemoveFromEventList+0x1a>
 8001806:	b672      	cpsid	i
 8001808:	e7fe      	b.n	8001808 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3318      	adds	r3, #24
 800180e:	0018      	movs	r0, r3
 8001810:	f7fe ff02 	bl	8000618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <xTaskRemoveFromEventList+0xa0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11d      	bne.n	8001858 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3304      	adds	r3, #4
 8001820:	0018      	movs	r0, r3
 8001822:	f7fe fef9 	bl	8000618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <xTaskRemoveFromEventList+0xa4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d903      	bls.n	800183a <xTaskRemoveFromEventList+0x4a>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <xTaskRemoveFromEventList+0xa4>)
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183e:	0013      	movs	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	189b      	adds	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <xTaskRemoveFromEventList+0xa8>)
 8001848:	189a      	adds	r2, r3, r2
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3304      	adds	r3, #4
 800184e:	0019      	movs	r1, r3
 8001850:	0010      	movs	r0, r2
 8001852:	f7fe fe89 	bl	8000568 <vListInsertEnd>
 8001856:	e007      	b.n	8001868 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3318      	adds	r3, #24
 800185c:	001a      	movs	r2, r3
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <xTaskRemoveFromEventList+0xac>)
 8001860:	0011      	movs	r1, r2
 8001862:	0018      	movs	r0, r3
 8001864:	f7fe fe80 	bl	8000568 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <xTaskRemoveFromEventList+0xb0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	429a      	cmp	r2, r3
 8001874:	d905      	bls.n	8001882 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001876:	2301      	movs	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <xTaskRemoveFromEventList+0xb4>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e001      	b.n	8001886 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b004      	add	sp, #16
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000192c 	.word	0x2000192c
 8001894:	2000190c 	.word	0x2000190c
 8001898:	20001830 	.word	0x20001830
 800189c:	200018c4 	.word	0x200018c4
 80018a0:	2000182c 	.word	0x2000182c
 80018a4:	20001918 	.word	0x20001918

080018a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <vTaskInternalSetTimeOutState+0x20>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <vTaskInternalSetTimeOutState+0x24>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000191c 	.word	0x2000191c
 80018cc:	20001908 	.word	0x20001908

080018d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <xTaskCheckForTimeOut+0x14>
 80018e0:	b672      	cpsid	i
 80018e2:	e7fe      	b.n	80018e2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <xTaskCheckForTimeOut+0x1e>
 80018ea:	b672      	cpsid	i
 80018ec:	e7fe      	b.n	80018ec <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80018ee:	f7fe ff4f 	bl	8000790 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <xTaskCheckForTimeOut+0x98>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	d102      	bne.n	8001910 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e024      	b.n	800195a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <xTaskCheckForTimeOut+0x9c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d007      	beq.n	800192c <xTaskCheckForTimeOut+0x5c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	429a      	cmp	r2, r3
 8001924:	d302      	bcc.n	800192c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e016      	b.n	800195a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d20c      	bcs.n	8001950 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff ffaf 	bl	80018a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e004      	b.n	800195a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001956:	2301      	movs	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800195a:	f7fe ff2b 	bl	80007b4 <vPortExitCritical>

	return xReturn;
 800195e:	697b      	ldr	r3, [r7, #20]
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b006      	add	sp, #24
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20001908 	.word	0x20001908
 800196c:	2000191c 	.word	0x2000191c

08001970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <vTaskMissedYield+0x10>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20001918 	.word	0x20001918

08001984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800198c:	f000 f84e 	bl	8001a2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <prvIdleTask+0x1c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d9f9      	bls.n	800198c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001998:	f7fe feea 	bl	8000770 <vPortYield>
		prvCheckTasksWaitingTermination();
 800199c:	e7f6      	b.n	800198c <prvIdleTask+0x8>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	20001830 	.word	0x20001830

080019a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	e00c      	b.n	80019ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	0013      	movs	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <prvInitialiseTaskLists+0x68>)
 80019bc:	189b      	adds	r3, r3, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fda9 	bl	8000516 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d9ef      	bls.n	80019b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <prvInitialiseTaskLists+0x6c>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f7fe fd9f 	bl	8000516 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <prvInitialiseTaskLists+0x70>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f7fe fd9b 	bl	8000516 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <prvInitialiseTaskLists+0x74>)
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7fe fd97 	bl	8000516 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <prvInitialiseTaskLists+0x78>)
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7fe fd93 	bl	8000516 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <prvInitialiseTaskLists+0x7c>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe fd8f 	bl	8000516 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <prvInitialiseTaskLists+0x80>)
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <prvInitialiseTaskLists+0x6c>)
 80019fc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <prvInitialiseTaskLists+0x84>)
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <prvInitialiseTaskLists+0x70>)
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20001830 	.word	0x20001830
 8001a10:	20001894 	.word	0x20001894
 8001a14:	200018a8 	.word	0x200018a8
 8001a18:	200018c4 	.word	0x200018c4
 8001a1c:	200018d8 	.word	0x200018d8
 8001a20:	200018f0 	.word	0x200018f0
 8001a24:	200018bc 	.word	0x200018bc
 8001a28:	200018c0 	.word	0x200018c0

08001a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a32:	e01a      	b.n	8001a6a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8001a34:	f7fe feac 	bl	8000790 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <prvCheckTasksWaitingTermination+0x50>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fde7 	bl	8000618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <prvCheckTasksWaitingTermination+0x54>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1e5a      	subs	r2, r3, #1
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <prvCheckTasksWaitingTermination+0x54>)
 8001a52:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <prvCheckTasksWaitingTermination+0x58>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <prvCheckTasksWaitingTermination+0x58>)
 8001a5c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8001a5e:	f7fe fea9 	bl	80007b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 f80f 	bl	8001a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <prvCheckTasksWaitingTermination+0x58>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e0      	bne.n	8001a34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	200018d8 	.word	0x200018d8
 8001a80:	20001904 	.word	0x20001904
 8001a84:	200018ec 	.word	0x200018ec

08001a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe fd31 	bl	80004fc <vPortFree>
			vPortFree( pxTCB );
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7fe fd2d 	bl	80004fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <prvResetNextTaskUnblockTime+0x34>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d104      	bne.n	8001ac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <prvResetNextTaskUnblockTime+0x38>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001ac4:	e008      	b.n	8001ad8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <prvResetNextTaskUnblockTime+0x34>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <prvResetNextTaskUnblockTime+0x38>)
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200018bc 	.word	0x200018bc
 8001ae4:	20001924 	.word	0x20001924

08001ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <xTaskGetSchedulerState+0x30>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001af6:	2301      	movs	r3, #1
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	e008      	b.n	8001b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <xTaskGetSchedulerState+0x34>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001b04:	2302      	movs	r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	e001      	b.n	8001b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001b0e:	687b      	ldr	r3, [r7, #4]
	}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20001910 	.word	0x20001910
 8001b1c:	2000192c 	.word	0x2000192c

08001b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <xTaskPriorityDisinherit+0xac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <xTaskPriorityDisinherit+0x24>
 8001b40:	b672      	cpsid	i
 8001b42:	e7fe      	b.n	8001b42 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <xTaskPriorityDisinherit+0x30>
 8001b4c:	b672      	cpsid	i
 8001b4e:	e7fe      	b.n	8001b4e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d02c      	beq.n	8001bc0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d128      	bne.n	8001bc0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3304      	adds	r3, #4
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7fe fd50 	bl	8000618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	2205      	movs	r2, #5
 8001b86:	1ad2      	subs	r2, r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <xTaskPriorityDisinherit+0xb0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d903      	bls.n	8001ba0 <xTaskPriorityDisinherit+0x80>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <xTaskPriorityDisinherit+0xb0>)
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <xTaskPriorityDisinherit+0xb4>)
 8001bae:	189a      	adds	r2, r3, r2
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	0010      	movs	r0, r2
 8001bb8:	f7fe fcd6 	bl	8000568 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	2000182c 	.word	0x2000182c
 8001bd0:	2000190c 	.word	0x2000190c
 8001bd4:	20001830 	.word	0x20001830

08001bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3304      	adds	r3, #4
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7fe fd12 	bl	8000618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	d10b      	bne.n	8001c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	1d1a      	adds	r2, r3, #4
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8001c08:	0011      	movs	r1, r2
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7fe fcac 	bl	8000568 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c10:	e026      	b.n	8001c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	18d3      	adds	r3, r2, r3
 8001c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d209      	bcs.n	8001c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3304      	adds	r3, #4
 8001c34:	0019      	movs	r1, r3
 8001c36:	0010      	movs	r0, r2
 8001c38:	f7fe fcb8 	bl	80005ac <vListInsert>
}
 8001c3c:	e010      	b.n	8001c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	0019      	movs	r1, r3
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	f7fe fcae 	bl	80005ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d202      	bcs.n	8001c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20001908 	.word	0x20001908
 8001c6c:	2000182c 	.word	0x2000182c
 8001c70:	200018f0 	.word	0x200018f0
 8001c74:	200018c0 	.word	0x200018c0
 8001c78:	200018bc 	.word	0x200018bc
 8001c7c:	20001924 	.word	0x20001924

08001c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001c8a:	f000 faa3 	bl	80021d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <xTimerCreateTimerTask+0x44>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001c96:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <xTimerCreateTimerTask+0x48>)
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <xTimerCreateTimerTask+0x4c>)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <xTimerCreateTimerTask+0x50>)
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2250      	movs	r2, #80	; 0x50
 8001ca6:	f7ff fa1a 	bl	80010de <xTaskCreate>
 8001caa:	0003      	movs	r3, r0
 8001cac:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <xTimerCreateTimerTask+0x38>
 8001cb4:	b672      	cpsid	i
 8001cb6:	e7fe      	b.n	8001cb6 <xTimerCreateTimerTask+0x36>
	return xReturn;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	20001960 	.word	0x20001960
 8001cc8:	0800232c 	.word	0x0800232c
 8001ccc:	08001df5 	.word	0x08001df5
 8001cd0:	20001964 	.word	0x20001964

08001cd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <xTimerGenericCommand+0x1c>
 8001cec:	b672      	cpsid	i
 8001cee:	e7fe      	b.n	8001cee <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <xTimerGenericCommand+0x94>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d031      	beq.n	8001d5c <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	dc1a      	bgt.n	8001d48 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001d12:	f7ff fee9 	bl	8001ae8 <xTaskGetSchedulerState>
 8001d16:	0003      	movs	r3, r0
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d10a      	bne.n	8001d32 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <xTimerGenericCommand+0x94>)
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d22:	2310      	movs	r3, #16
 8001d24:	18f9      	adds	r1, r7, r3
 8001d26:	2300      	movs	r3, #0
 8001d28:	f7fe fe73 	bl	8000a12 <xQueueGenericSend>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	e014      	b.n	8001d5c <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <xTimerGenericCommand+0x94>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	2310      	movs	r3, #16
 8001d38:	18f9      	adds	r1, r7, r3
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f7fe fe68 	bl	8000a12 <xQueueGenericSend>
 8001d42:	0003      	movs	r3, r0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e009      	b.n	8001d5c <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <xTimerGenericCommand+0x94>)
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	2310      	movs	r3, #16
 8001d50:	18f9      	adds	r1, r7, r3
 8001d52:	2300      	movs	r3, #0
 8001d54:	f7fe ff21 	bl	8000b9a <xQueueGenericSendFromISR>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b008      	add	sp, #32
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	20001960 	.word	0x20001960

08001d6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <prvProcessExpiredTimer+0x84>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3304      	adds	r3, #4
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe fc47 	bl	8000618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2228      	movs	r2, #40	; 0x28
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	001a      	movs	r2, r3
 8001d92:	2304      	movs	r3, #4
 8001d94:	4013      	ands	r3, r2
 8001d96:	d019      	beq.n	8001dcc <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	18d1      	adds	r1, r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f8c3 	bl	8001f30 <prvInsertTimerInActiveList>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d017      	beq.n	8001dde <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	f7ff ff8b 	bl	8001cd4 <xTimerGenericCommand>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <prvProcessExpiredTimer+0x72>
 8001dc8:	b672      	cpsid	i
 8001dca:	e7fe      	b.n	8001dca <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2228      	movs	r2, #40	; 0x28
 8001dd0:	5c9b      	ldrb	r3, [r3, r2]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2228      	movs	r2, #40	; 0x28
 8001ddc:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	0010      	movs	r0, r2
 8001de6:	4798      	blx	r3
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20001958 	.word	0x20001958

08001df4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	0018      	movs	r0, r3
 8001e02:	f000 f853 	bl	8001eac <prvGetNextExpireTime>
 8001e06:	0003      	movs	r3, r0
 8001e08:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0011      	movs	r1, r2
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f803 	bl	8001e1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001e16:	f000 f8cd 	bl	8001fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e1a:	e7ef      	b.n	8001dfc <prvTimerTask+0x8>

08001e1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001e26:	f7ff faf7 	bl	8001418 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f85e 	bl	8001ef0 <prvSampleTimeNow>
 8001e34:	0003      	movs	r3, r0
 8001e36:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d12b      	bne.n	8001e96 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10c      	bne.n	8001e5e <prvProcessTimerOrBlockTask+0x42>
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d808      	bhi.n	8001e5e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8001e4c:	f7ff faf0 	bl	8001430 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0011      	movs	r1, r2
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7ff ff88 	bl	8001d6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8001e5c:	e01d      	b.n	8001e9a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <prvProcessTimerOrBlockTask+0x88>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <prvProcessTimerOrBlockTask+0x56>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <prvProcessTimerOrBlockTask+0x58>
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <prvProcessTimerOrBlockTask+0x8c>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	0019      	movs	r1, r3
 8001e84:	f7ff f8f8 	bl	8001078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001e88:	f7ff fad2 	bl	8001430 <xTaskResumeAll>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d104      	bne.n	8001e9a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8001e90:	f7fe fc6e 	bl	8000770 <vPortYield>
}
 8001e94:	e001      	b.n	8001e9a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8001e96:	f7ff facb 	bl	8001430 <xTaskResumeAll>
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	2000195c 	.word	0x2000195c
 8001ea8:	20001960 	.word	0x20001960

08001eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <prvGetNextExpireTime+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <prvGetNextExpireTime+0x16>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	e000      	b.n	8001ec4 <prvGetNextExpireTime+0x18>
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <prvGetNextExpireTime+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e001      	b.n	8001ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20001958 	.word	0x20001958

08001ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8001ef8:	f7ff fb26 	bl	8001548 <xTaskGetTickCount>
 8001efc:	0003      	movs	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <prvSampleTimeNow+0x3c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d205      	bcs.n	8001f16 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8001f0a:	f000 f905 	bl	8002118 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e002      	b.n	8001f1c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <prvSampleTimeNow+0x3c>)
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b004      	add	sp, #16
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20001968 	.word	0x20001968

08001f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d812      	bhi.n	8001f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d302      	bcc.n	8001f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e01b      	b.n	8001fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <prvInsertTimerInActiveList+0x7c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3304      	adds	r3, #4
 8001f72:	0019      	movs	r1, r3
 8001f74:	0010      	movs	r0, r2
 8001f76:	f7fe fb19 	bl	80005ac <vListInsert>
 8001f7a:	e012      	b.n	8001fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d206      	bcs.n	8001f92 <prvInsertTimerInActiveList+0x62>
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d302      	bcc.n	8001f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e007      	b.n	8001fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <prvInsertTimerInActiveList+0x80>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	f7fe fb05 	bl	80005ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001fa2:	697b      	ldr	r3, [r7, #20]
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b006      	add	sp, #24
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000195c 	.word	0x2000195c
 8001fb0:	20001958 	.word	0x20001958

08001fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001fba:	e099      	b.n	80020f0 <prvProcessReceivedCommands+0x13c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	da00      	bge.n	8001fc8 <prvProcessReceivedCommands+0x14>
 8001fc6:	e092      	b.n	80020ee <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe fb1b 	bl	8000618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff ff83 	bl	8001ef0 <prvSampleTimeNow>
 8001fea:	0003      	movs	r3, r0
 8001fec:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 8001fee:	2308      	movs	r3, #8
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d900      	bls.n	8001ffa <prvProcessReceivedCommands+0x46>
 8001ff8:	e07a      	b.n	80020f0 <prvProcessReceivedCommands+0x13c>
 8001ffa:	009a      	lsls	r2, r3, #2
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <prvProcessReceivedCommands+0x15c>)
 8001ffe:	18d3      	adds	r3, r2, r3
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2228      	movs	r2, #40	; 0x28
 8002008:	5c9b      	ldrb	r3, [r3, r2]
 800200a:	2201      	movs	r2, #1
 800200c:	4313      	orrs	r3, r2
 800200e:	b2d9      	uxtb	r1, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2228      	movs	r2, #40	; 0x28
 8002014:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002016:	2008      	movs	r0, #8
 8002018:	183b      	adds	r3, r7, r0
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	18d1      	adds	r1, r2, r3
 8002022:	183b      	adds	r3, r7, r0
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	69f8      	ldr	r0, [r7, #28]
 800202a:	f7ff ff81 	bl	8001f30 <prvInsertTimerInActiveList>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d05e      	beq.n	80020f0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	0010      	movs	r0, r2
 800203a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2228      	movs	r2, #40	; 0x28
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	001a      	movs	r2, r3
 8002044:	2304      	movs	r3, #4
 8002046:	4013      	ands	r3, r2
 8002048:	d052      	beq.n	80020f0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800204a:	2308      	movs	r3, #8
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	18d2      	adds	r2, r2, r3
 8002056:	69f8      	ldr	r0, [r7, #28]
 8002058:	2300      	movs	r3, #0
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2300      	movs	r3, #0
 800205e:	2100      	movs	r1, #0
 8002060:	f7ff fe38 	bl	8001cd4 <xTimerGenericCommand>
 8002064:	0003      	movs	r3, r0
 8002066:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d140      	bne.n	80020f0 <prvProcessReceivedCommands+0x13c>
 800206e:	b672      	cpsid	i
 8002070:	e7fe      	b.n	8002070 <prvProcessReceivedCommands+0xbc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	2228      	movs	r2, #40	; 0x28
 8002076:	5c9b      	ldrb	r3, [r3, r2]
 8002078:	2201      	movs	r2, #1
 800207a:	4393      	bics	r3, r2
 800207c:	b2d9      	uxtb	r1, r3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2228      	movs	r2, #40	; 0x28
 8002082:	5499      	strb	r1, [r3, r2]
					break;
 8002084:	e034      	b.n	80020f0 <prvProcessReceivedCommands+0x13c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	2228      	movs	r2, #40	; 0x28
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	2201      	movs	r2, #1
 800208e:	4313      	orrs	r3, r2
 8002090:	b2d9      	uxtb	r1, r3
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2228      	movs	r2, #40	; 0x28
 8002096:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002098:	2308      	movs	r3, #8
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <prvProcessReceivedCommands+0xfa>
 80020aa:	b672      	cpsid	i
 80020ac:	e7fe      	b.n	80020ac <prvProcessReceivedCommands+0xf8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	18d1      	adds	r1, r2, r3
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	69f8      	ldr	r0, [r7, #28]
 80020bc:	f7ff ff38 	bl	8001f30 <prvInsertTimerInActiveList>
					break;
 80020c0:	e016      	b.n	80020f0 <prvProcessReceivedCommands+0x13c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	2228      	movs	r2, #40	; 0x28
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	001a      	movs	r2, r3
 80020ca:	2302      	movs	r3, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d104      	bne.n	80020da <prvProcessReceivedCommands+0x126>
						{
							vPortFree( pxTimer );
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fa12 	bl	80004fc <vPortFree>
 80020d8:	e00a      	b.n	80020f0 <prvProcessReceivedCommands+0x13c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	2228      	movs	r2, #40	; 0x28
 80020de:	5c9b      	ldrb	r3, [r3, r2]
 80020e0:	2201      	movs	r2, #1
 80020e2:	4393      	bics	r3, r2
 80020e4:	b2d9      	uxtb	r1, r3
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2228      	movs	r2, #40	; 0x28
 80020ea:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80020ec:	e000      	b.n	80020f0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80020ee:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <prvProcessReceivedCommands+0x160>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2208      	movs	r2, #8
 80020f6:	18b9      	adds	r1, r7, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7fe fdc1 	bl	8000c82 <xQueueReceive>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d000      	beq.n	8002106 <prvProcessReceivedCommands+0x152>
 8002104:	e75a      	b.n	8001fbc <prvProcessReceivedCommands+0x8>
	}
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b008      	add	sp, #32
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	0800233c 	.word	0x0800233c
 8002114:	20001960 	.word	0x20001960

08002118 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800211e:	e041      	b.n	80021a4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <prvSwitchTimerLists+0xb4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <prvSwitchTimerLists+0xb4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3304      	adds	r3, #4
 8002138:	0018      	movs	r0, r3
 800213a:	f7fe fa6d 	bl	8000618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	0010      	movs	r0, r2
 8002146:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2228      	movs	r2, #40	; 0x28
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	001a      	movs	r2, r3
 8002150:	2304      	movs	r3, #4
 8002152:	4013      	ands	r3, r2
 8002154:	d026      	beq.n	80021a4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	18d3      	adds	r3, r2, r3
 800215e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d90e      	bls.n	8002186 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <prvSwitchTimerLists+0xb4>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3304      	adds	r3, #4
 800217c:	0019      	movs	r1, r3
 800217e:	0010      	movs	r0, r2
 8002180:	f7fe fa14 	bl	80005ac <vListInsert>
 8002184:	e00e      	b.n	80021a4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	2100      	movs	r1, #0
 8002192:	f7ff fd9f 	bl	8001cd4 <xTimerGenericCommand>
 8002196:	0003      	movs	r3, r0
 8002198:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <prvSwitchTimerLists+0x8c>
 80021a0:	b672      	cpsid	i
 80021a2:	e7fe      	b.n	80021a2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <prvSwitchTimerLists+0xb4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1b8      	bne.n	8002120 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <prvSwitchTimerLists+0xb4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <prvSwitchTimerLists+0xb8>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <prvSwitchTimerLists+0xb4>)
 80021ba:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <prvSwitchTimerLists+0xb8>)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b006      	add	sp, #24
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	20001958 	.word	0x20001958
 80021d0:	2000195c 	.word	0x2000195c

080021d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80021d8:	f7fe fada 	bl	8000790 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <prvCheckForValidListAndQueue+0x5c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d120      	bne.n	8002226 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <prvCheckForValidListAndQueue+0x60>)
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe f995 	bl	8000516 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <prvCheckForValidListAndQueue+0x64>)
 80021ee:	0018      	movs	r0, r3
 80021f0:	f7fe f991 	bl	8000516 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <prvCheckForValidListAndQueue+0x68>)
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <prvCheckForValidListAndQueue+0x60>)
 80021f8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <prvCheckForValidListAndQueue+0x6c>)
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <prvCheckForValidListAndQueue+0x64>)
 80021fe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002200:	2200      	movs	r2, #0
 8002202:	210c      	movs	r1, #12
 8002204:	2002      	movs	r0, #2
 8002206:	f7fe fbaf 	bl	8000968 <xQueueGenericCreate>
 800220a:	0002      	movs	r2, r0
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <prvCheckForValidListAndQueue+0x5c>)
 800220e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <prvCheckForValidListAndQueue+0x5c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <prvCheckForValidListAndQueue+0x5c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a09      	ldr	r2, [pc, #36]	; (8002244 <prvCheckForValidListAndQueue+0x70>)
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f7fe ff01 	bl	8001028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002226:	f7fe fac5 	bl	80007b4 <vPortExitCritical>
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20001960 	.word	0x20001960
 8002234:	20001930 	.word	0x20001930
 8002238:	20001944 	.word	0x20001944
 800223c:	20001958 	.word	0x20001958
 8002240:	2000195c 	.word	0x2000195c
 8002244:	08002334 	.word	0x08002334

08002248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800224a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <LoopForever+0x6>)
  ldr r1, =_edata
 800224e:	490e      	ldr	r1, [pc, #56]	; (8002288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <LoopForever+0xe>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002264:	4c0b      	ldr	r4, [pc, #44]	; (8002294 <LoopForever+0x16>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002272:	f7fd ffd5 	bl	8000220 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002276:	f000 f811 	bl	800229c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227a:	f7fe f85b 	bl	8000334 <main>

0800227e <LoopForever>:

LoopForever:
    b LoopForever
 800227e:	e7fe      	b.n	800227e <LoopForever>
  ldr   r0, =_estack
 8002280:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002288:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800228c:	0800236c 	.word	0x0800236c
  ldr r2, =_sbss
 8002290:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002294:	200019ac 	.word	0x200019ac

08002298 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_COMP_IRQHandler>
	...

0800229c <__libc_init_array>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	2600      	movs	r6, #0
 80022a0:	4d0c      	ldr	r5, [pc, #48]	; (80022d4 <__libc_init_array+0x38>)
 80022a2:	4c0d      	ldr	r4, [pc, #52]	; (80022d8 <__libc_init_array+0x3c>)
 80022a4:	1b64      	subs	r4, r4, r5
 80022a6:	10a4      	asrs	r4, r4, #2
 80022a8:	42a6      	cmp	r6, r4
 80022aa:	d109      	bne.n	80022c0 <__libc_init_array+0x24>
 80022ac:	2600      	movs	r6, #0
 80022ae:	f000 f82b 	bl	8002308 <_init>
 80022b2:	4d0a      	ldr	r5, [pc, #40]	; (80022dc <__libc_init_array+0x40>)
 80022b4:	4c0a      	ldr	r4, [pc, #40]	; (80022e0 <__libc_init_array+0x44>)
 80022b6:	1b64      	subs	r4, r4, r5
 80022b8:	10a4      	asrs	r4, r4, #2
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d105      	bne.n	80022ca <__libc_init_array+0x2e>
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	00b3      	lsls	r3, r6, #2
 80022c2:	58eb      	ldr	r3, [r5, r3]
 80022c4:	4798      	blx	r3
 80022c6:	3601      	adds	r6, #1
 80022c8:	e7ee      	b.n	80022a8 <__libc_init_array+0xc>
 80022ca:	00b3      	lsls	r3, r6, #2
 80022cc:	58eb      	ldr	r3, [r5, r3]
 80022ce:	4798      	blx	r3
 80022d0:	3601      	adds	r6, #1
 80022d2:	e7f2      	b.n	80022ba <__libc_init_array+0x1e>
 80022d4:	08002364 	.word	0x08002364
 80022d8:	08002364 	.word	0x08002364
 80022dc:	08002364 	.word	0x08002364
 80022e0:	08002368 	.word	0x08002368

080022e4 <memcpy>:
 80022e4:	2300      	movs	r3, #0
 80022e6:	b510      	push	{r4, lr}
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d100      	bne.n	80022ee <memcpy+0xa>
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	5ccc      	ldrb	r4, [r1, r3]
 80022f0:	54c4      	strb	r4, [r0, r3]
 80022f2:	3301      	adds	r3, #1
 80022f4:	e7f8      	b.n	80022e8 <memcpy+0x4>

080022f6 <memset>:
 80022f6:	0003      	movs	r3, r0
 80022f8:	1812      	adds	r2, r2, r0
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d100      	bne.n	8002300 <memset+0xa>
 80022fe:	4770      	bx	lr
 8002300:	7019      	strb	r1, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	e7f9      	b.n	80022fa <memset+0x4>
	...

08002308 <_init>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr

08002314 <_fini>:
 8002314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231a:	bc08      	pop	{r3}
 800231c:	469e      	mov	lr, r3
 800231e:	4770      	bx	lr
