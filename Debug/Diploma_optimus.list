
Diploma_optimus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002948  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a70  08002a70  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002a70  08002a70  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a70  08002a70  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000199c  20000008  08002a80  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  200019a4  08002a80  000219a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007052  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012d3  00000000  00000000  00027082  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000608  00000000  00000000  00028358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  00028960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012c37  00000000  00000000  00028eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005446  00000000  00000000  0003bae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064110  00000000  00000000  00040f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a503d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001410  00000000  00000000  000a50b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029f0 	.word	0x080029f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	080029f0 	.word	0x080029f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000224:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <SystemInit+0x74>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <SystemInit+0x74>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <SystemInit+0x74>)
 8000232:	685a      	ldr	r2, [r3, #4]
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <SystemInit+0x74>)
 8000236:	4918      	ldr	r1, [pc, #96]	; (8000298 <SystemInit+0x78>)
 8000238:	400a      	ands	r2, r1
 800023a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <SystemInit+0x74>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <SystemInit+0x74>)
 8000242:	4916      	ldr	r1, [pc, #88]	; (800029c <SystemInit+0x7c>)
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x74>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <SystemInit+0x74>)
 800024e:	4914      	ldr	r1, [pc, #80]	; (80002a0 <SystemInit+0x80>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SystemInit+0x74>)
 8000256:	685a      	ldr	r2, [r3, #4]
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <SystemInit+0x74>)
 800025a:	4912      	ldr	r1, [pc, #72]	; (80002a4 <SystemInit+0x84>)
 800025c:	400a      	ands	r2, r1
 800025e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <SystemInit+0x74>)
 8000262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <SystemInit+0x74>)
 8000266:	210f      	movs	r1, #15
 8000268:	438a      	bics	r2, r1
 800026a:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2C;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <SystemInit+0x74>)
 800026e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <SystemInit+0x74>)
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <SystemInit+0x88>)
 8000274:	400a      	ands	r2, r1
 8000276:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SystemInit+0x74>)
 800027a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <SystemInit+0x74>)
 800027e:	2101      	movs	r1, #1
 8000280:	438a      	bics	r2, r1
 8000282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <SystemInit+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
	
	/* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800028a:	f000 f80f 	bl	80002ac <SetSysClock>

}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	08ffb80c 	.word	0x08ffb80c
 800029c:	fef6ffff 	.word	0xfef6ffff
 80002a0:	fffbffff 	.word	0xfffbffff
 80002a4:	ffc0ffff 	.word	0xffc0ffff
 80002a8:	fffcfe2c 	.word	0xfffcfe2c

080002ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80002b2:	4b3c      	ldr	r3, [pc, #240]	; (80003a4 <SetSysClock+0xf8>)
 80002b4:	2211      	movs	r2, #17
 80002b6:	601a      	str	r2, [r3, #0]

  /* PREDiv = 1*/
  RCC->CFGR2 &= (uint32_t)~RCC_CFGR2_PREDIV;
 80002b8:	4b3b      	ldr	r3, [pc, #236]	; (80003a8 <SetSysClock+0xfc>)
 80002ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002bc:	4b3a      	ldr	r3, [pc, #232]	; (80003a8 <SetSysClock+0xfc>)
 80002be:	210f      	movs	r1, #15
 80002c0:	438a      	bics	r2, r1
 80002c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002c4:	4a38      	ldr	r2, [pc, #224]	; (80003a8 <SetSysClock+0xfc>)
 80002c6:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <SetSysClock+0xfc>)
 80002c8:	6852      	ldr	r2, [r2, #4]
 80002ca:	605a      	str	r2, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80002cc:	4a36      	ldr	r2, [pc, #216]	; (80003a8 <SetSysClock+0xfc>)
 80002ce:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <SetSysClock+0xfc>)
 80002d0:	6852      	ldr	r2, [r2, #4]
 80002d2:	605a      	str	r2, [r3, #4]

  /* Set HSE, CSS on */
  RCC->CR |= (uint32_t)((RCC_CR_HSEON | RCC_CR_CSSON));
 80002d4:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <SetSysClock+0xfc>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <SetSysClock+0xfc>)
 80002da:	2190      	movs	r1, #144	; 0x90
 80002dc:	0309      	lsls	r1, r1, #12
 80002de:	430a      	orrs	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]
  /* Wait till HSE start*/
  uint16_t hseStartupCounter = 0;
 80002e2:	1dbb      	adds	r3, r7, #6
 80002e4:	2200      	movs	r2, #0
 80002e6:	801a      	strh	r2, [r3, #0]
  while((!(RCC->CR & RCC_CR_HSERDY)) && (hseStartupCounter < HSE_STARTUP_TIMEOUT))
 80002e8:	e004      	b.n	80002f4 <SetSysClock+0x48>
  {
	  hseStartupCounter++;
 80002ea:	1dbb      	adds	r3, r7, #6
 80002ec:	881a      	ldrh	r2, [r3, #0]
 80002ee:	1dbb      	adds	r3, r7, #6
 80002f0:	3201      	adds	r2, #1
 80002f2:	801a      	strh	r2, [r3, #0]
  while((!(RCC->CR & RCC_CR_HSERDY)) && (hseStartupCounter < HSE_STARTUP_TIMEOUT))
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <SetSysClock+0xfc>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	029b      	lsls	r3, r3, #10
 80002fc:	4013      	ands	r3, r2
 80002fe:	d104      	bne.n	800030a <SetSysClock+0x5e>
 8000300:	1dbb      	adds	r3, r7, #6
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	4a29      	ldr	r2, [pc, #164]	; (80003ac <SetSysClock+0x100>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d9ef      	bls.n	80002ea <SetSysClock+0x3e>
  }

  if((RCC->CR & RCC_CR_HSERDY))
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <SetSysClock+0xfc>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	029b      	lsls	r3, r3, #10
 8000312:	4013      	ands	r3, r2
 8000314:	d010      	beq.n	8000338 <SetSysClock+0x8c>
  {
	  //If HSE start
	  __IS_HSE_START__ = 1;//Set HSE Flag true
 8000316:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <SetSysClock+0x104>)
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
	  /* PLL configuration = (HSE/PREDiv)*PLLMUL = (8/1)*6 = 48 */
	  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL));
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <SetSysClock+0xfc>)
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <SetSysClock+0xfc>)
 8000322:	4924      	ldr	r1, [pc, #144]	; (80003b4 <SetSysClock+0x108>)
 8000324:	400a      	ands	r2, r1
 8000326:	605a      	str	r2, [r3, #4]
	  RCC->CFGR |= (uint32_t)((RCC_CFGR_PLLSRC_HSE_PREDIV | RCC_CFGR_PLLMUL6));
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <SetSysClock+0xfc>)
 800032a:	685a      	ldr	r2, [r3, #4]
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <SetSysClock+0xfc>)
 800032e:	2188      	movs	r1, #136	; 0x88
 8000330:	0349      	lsls	r1, r1, #13
 8000332:	430a      	orrs	r2, r1
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	e00f      	b.n	8000358 <SetSysClock+0xac>
  }
  else
  {
	  //If HSE don't start
	  __IS_HSE_START__ = 0;//Set HSE Flag false
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <SetSysClock+0x104>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
	  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
	  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL));
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <SetSysClock+0xfc>)
 8000340:	685a      	ldr	r2, [r3, #4]
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <SetSysClock+0xfc>)
 8000344:	491b      	ldr	r1, [pc, #108]	; (80003b4 <SetSysClock+0x108>)
 8000346:	400a      	ands	r2, r1
 8000348:	605a      	str	r2, [r3, #4]
	  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_DIV2 | RCC_CFGR_PLLMUL12);
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <SetSysClock+0xfc>)
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <SetSysClock+0xfc>)
 8000350:	21a0      	movs	r1, #160	; 0xa0
 8000352:	0389      	lsls	r1, r1, #14
 8000354:	430a      	orrs	r2, r1
 8000356:	605a      	str	r2, [r3, #4]
  }

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <SetSysClock+0xfc>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <SetSysClock+0xfc>)
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	0449      	lsls	r1, r1, #17
 8000362:	430a      	orrs	r2, r1
 8000364:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <SetSysClock+0xfc>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	049b      	lsls	r3, r3, #18
 8000370:	4013      	ands	r3, r2
 8000372:	d0f9      	beq.n	8000368 <SetSysClock+0xbc>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <SetSysClock+0xfc>)
 8000376:	685a      	ldr	r2, [r3, #4]
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <SetSysClock+0xfc>)
 800037a:	2103      	movs	r1, #3
 800037c:	438a      	bics	r2, r1
 800037e:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <SetSysClock+0xfc>)
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <SetSysClock+0xfc>)
 8000386:	2102      	movs	r1, #2
 8000388:	430a      	orrs	r2, r1
 800038a:	605a      	str	r2, [r3, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <SetSysClock+0xfc>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	220c      	movs	r2, #12
 8000394:	4013      	ands	r3, r2
 8000396:	2b08      	cmp	r3, #8
 8000398:	d1f9      	bne.n	800038e <SetSysClock+0xe2>
  {
  }
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40022000 	.word	0x40022000
 80003a8:	40021000 	.word	0x40021000
 80003ac:	00004fff 	.word	0x00004fff
 80003b0:	20000024 	.word	0x20000024
 80003b4:	ffc27fff 	.word	0xffc27fff

080003b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	0002      	movs	r2, r0
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	001a      	movs	r2, r3
 80003ca:	231f      	movs	r3, #31
 80003cc:	4013      	ands	r3, r2
 80003ce:	2201      	movs	r2, #1
 80003d0:	409a      	lsls	r2, r3
 80003d2:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <NVIC_EnableIRQ+0x28>)
 80003d4:	601a      	str	r2, [r3, #0]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	e000e100 	.word	0xe000e100

080003e4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	0002      	movs	r2, r0
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	1dfb      	adds	r3, r7, #7
 80003f0:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80003f2:	1dfb      	adds	r3, r7, #7
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b7f      	cmp	r3, #127	; 0x7f
 80003f8:	d932      	bls.n	8000460 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80003fa:	4a2f      	ldr	r2, [pc, #188]	; (80004b8 <NVIC_SetPriority+0xd4>)
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	0019      	movs	r1, r3
 8000402:	230f      	movs	r3, #15
 8000404:	400b      	ands	r3, r1
 8000406:	3b08      	subs	r3, #8
 8000408:	089b      	lsrs	r3, r3, #2
 800040a:	3306      	adds	r3, #6
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	18d3      	adds	r3, r2, r3
 8000410:	3304      	adds	r3, #4
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	1dfa      	adds	r2, r7, #7
 8000416:	7812      	ldrb	r2, [r2, #0]
 8000418:	0011      	movs	r1, r2
 800041a:	2203      	movs	r2, #3
 800041c:	400a      	ands	r2, r1
 800041e:	00d2      	lsls	r2, r2, #3
 8000420:	21ff      	movs	r1, #255	; 0xff
 8000422:	4091      	lsls	r1, r2
 8000424:	000a      	movs	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	401a      	ands	r2, r3
 800042a:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	019b      	lsls	r3, r3, #6
 8000430:	22ff      	movs	r2, #255	; 0xff
 8000432:	401a      	ands	r2, r3
 8000434:	1dfb      	adds	r3, r7, #7
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	0018      	movs	r0, r3
 800043a:	2303      	movs	r3, #3
 800043c:	4003      	ands	r3, r0
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000442:	481d      	ldr	r0, [pc, #116]	; (80004b8 <NVIC_SetPriority+0xd4>)
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	001c      	movs	r4, r3
 800044a:	230f      	movs	r3, #15
 800044c:	4023      	ands	r3, r4
 800044e:	3b08      	subs	r3, #8
 8000450:	089b      	lsrs	r3, r3, #2
 8000452:	430a      	orrs	r2, r1
 8000454:	3306      	adds	r3, #6
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	18c3      	adds	r3, r0, r3
 800045a:	3304      	adds	r3, #4
 800045c:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800045e:	e027      	b.n	80004b0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000460:	4a16      	ldr	r2, [pc, #88]	; (80004bc <NVIC_SetPriority+0xd8>)
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b25b      	sxtb	r3, r3
 8000468:	089b      	lsrs	r3, r3, #2
 800046a:	33c0      	adds	r3, #192	; 0xc0
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	589b      	ldr	r3, [r3, r2]
 8000470:	1dfa      	adds	r2, r7, #7
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	0011      	movs	r1, r2
 8000476:	2203      	movs	r2, #3
 8000478:	400a      	ands	r2, r1
 800047a:	00d2      	lsls	r2, r2, #3
 800047c:	21ff      	movs	r1, #255	; 0xff
 800047e:	4091      	lsls	r1, r2
 8000480:	000a      	movs	r2, r1
 8000482:	43d2      	mvns	r2, r2
 8000484:	401a      	ands	r2, r3
 8000486:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	019b      	lsls	r3, r3, #6
 800048c:	22ff      	movs	r2, #255	; 0xff
 800048e:	401a      	ands	r2, r3
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	0018      	movs	r0, r3
 8000496:	2303      	movs	r3, #3
 8000498:	4003      	ands	r3, r0
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <NVIC_SetPriority+0xd8>)
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	089b      	lsrs	r3, r3, #2
 80004a8:	430a      	orrs	r2, r1
 80004aa:	33c0      	adds	r3, #192	; 0xc0
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	501a      	str	r2, [r3, r0]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b003      	add	sp, #12
 80004b6:	bd90      	pop	{r4, r7, pc}
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <PrmsInitialize>:
 *      Author: mironov-aa
 */
#include "PRMS_Initialize.h"

void PrmsInitialize(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	GpioInitialize();
 80004c4:	f000 f82e 	bl	8000524 <GpioInitialize>

	if(!__IS_HSE_START__)
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <PrmsInitialize+0x28>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d105      	bne.n	80004dc <PrmsInitialize+0x1c>
	{
		GPIOC->BSRR |= GPIO_BSRR_BS_7; //Warning if HSE don't start!
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <PrmsInitialize+0x2c>)
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <PrmsInitialize+0x2c>)
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	430a      	orrs	r2, r1
 80004da:	619a      	str	r2, [r3, #24]
	}

	InterruptInitialize();
 80004dc:	f000 f808 	bl	80004f0 <InterruptInitialize>

}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	20000025 	.word	0x20000025
 80004ec:	48000800 	.word	0x48000800

080004f0 <InterruptInitialize>:

void InterruptInitialize(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//Configure NVIC for user button on PA0
	NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004f4:	2005      	movs	r0, #5
 80004f6:	f7ff ff5f 	bl	80003b8 <NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI0_1_IRQn, 0);
 80004fa:	2100      	movs	r1, #0
 80004fc:	2005      	movs	r0, #5
 80004fe:	f7ff ff71 	bl	80003e4 <NVIC_SetPriority>

	//Set up EXTI
	EXTI->RTSR |= EXTI_RTSR_RT0; //Rising Edge for line 0
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <InterruptInitialize+0x30>)
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <InterruptInitialize+0x30>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	609a      	str	r2, [r3, #8]
	EXTI->IMR |= EXTI_IMR_IM0; //Interrupt mask for line 0
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <InterruptInitialize+0x30>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	4b03      	ldr	r3, [pc, #12]	; (8000520 <InterruptInitialize+0x30>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	601a      	str	r2, [r3, #0]
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40010400 	.word	0x40010400

08000524 <GpioInitialize>:

void GpioInitialize(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	//Enable clock for port A and C
	RCC->AHBENR |= (uint32_t)(RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOAEN);
 8000528:	4b34      	ldr	r3, [pc, #208]	; (80005fc <GpioInitialize+0xd8>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	4b33      	ldr	r3, [pc, #204]	; (80005fc <GpioInitialize+0xd8>)
 800052e:	21a0      	movs	r1, #160	; 0xa0
 8000530:	0309      	lsls	r1, r1, #12
 8000532:	430a      	orrs	r2, r1
 8000534:	615a      	str	r2, [r3, #20]
//******************************  GPIOC  ******************************//
	//PC8 configuration. vLed1Task indicator
	GPIOC->MODER |= GPIO_MODER_MODER8_0;//General Purpose output mode
 8000536:	4b32      	ldr	r3, [pc, #200]	; (8000600 <GpioInitialize+0xdc>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	4b31      	ldr	r3, [pc, #196]	; (8000600 <GpioInitialize+0xdc>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0249      	lsls	r1, r1, #9
 8000540:	430a      	orrs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_8;	//push-pull
 8000544:	4b2e      	ldr	r3, [pc, #184]	; (8000600 <GpioInitialize+0xdc>)
 8000546:	685a      	ldr	r2, [r3, #4]
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <GpioInitialize+0xdc>)
 800054a:	492e      	ldr	r1, [pc, #184]	; (8000604 <GpioInitialize+0xe0>)
 800054c:	400a      	ands	r2, r1
 800054e:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_0;//medium speed
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <GpioInitialize+0xdc>)
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <GpioInitialize+0xdc>)
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	0249      	lsls	r1, r1, #9
 800055a:	430a      	orrs	r2, r1
 800055c:	609a      	str	r2, [r3, #8]

	//PC9 configuration. vLed2Task indicator
	GPIOC->MODER |= GPIO_MODER_MODER9_0;//General Purpose output mode
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <GpioInitialize+0xdc>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <GpioInitialize+0xdc>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	02c9      	lsls	r1, r1, #11
 8000568:	430a      	orrs	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_9;	//push-pull
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <GpioInitialize+0xdc>)
 800056e:	685a      	ldr	r2, [r3, #4]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <GpioInitialize+0xdc>)
 8000572:	4925      	ldr	r1, [pc, #148]	; (8000608 <GpioInitialize+0xe4>)
 8000574:	400a      	ands	r2, r1
 8000576:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0;//medium speed
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <GpioInitialize+0xdc>)
 800057a:	689a      	ldr	r2, [r3, #8]
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <GpioInitialize+0xdc>)
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	02c9      	lsls	r1, r1, #11
 8000582:	430a      	orrs	r2, r1
 8000584:	609a      	str	r2, [r3, #8]

	//PC7 configuration. Warning(lit) or fatal error(blink) LED
	GPIOC->MODER |= GPIO_MODER_MODER7_0;//General Purpose output mode
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <GpioInitialize+0xdc>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <GpioInitialize+0xdc>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	01c9      	lsls	r1, r1, #7
 8000590:	430a      	orrs	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_7;//Push-pull
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <GpioInitialize+0xdc>)
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <GpioInitialize+0xdc>)
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	438a      	bics	r2, r1
 800059e:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_0;//medium speed
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <GpioInitialize+0xdc>)
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <GpioInitialize+0xdc>)
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	01c9      	lsls	r1, r1, #7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	609a      	str	r2, [r3, #8]

	//PC6 configuration. Led Indicator
	GPIOC->MODER |= GPIO_MODER_MODER6_0;	//General Purpose output mode
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <GpioInitialize+0xdc>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <GpioInitialize+0xdc>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0149      	lsls	r1, r1, #5
 80005b8:	430a      	orrs	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_6;		//Push-pull
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <GpioInitialize+0xdc>)
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <GpioInitialize+0xdc>)
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	438a      	bics	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0; //medium speed
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <GpioInitialize+0xdc>)
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <GpioInitialize+0xdc>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0149      	lsls	r1, r1, #5
 80005d2:	430a      	orrs	r2, r1
 80005d4:	609a      	str	r2, [r3, #8]
//******************************  GPIOA  ******************************//
	GPIOA->MODER &= (uint32_t)(~GPIO_MODER_MODER0);	//Input Mode
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	2390      	movs	r3, #144	; 0x90
 80005de:	05db      	lsls	r3, r3, #23
 80005e0:	2103      	movs	r1, #3
 80005e2:	438a      	bics	r2, r1
 80005e4:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1;//Pull down
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	2390      	movs	r3, #144	; 0x90
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	2102      	movs	r1, #2
 80005f2:	430a      	orrs	r2, r1
 80005f4:	60da      	str	r2, [r3, #12]
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800
 8000604:	fffffeff 	.word	0xfffffeff
 8000608:	fffffdff 	.word	0xfffffdff

0800060c <EXTI0_1_IRQHandler>:
#include "PRMS_Interrupts.h"

extern TaskHandle_t __BUTTON_HANDLER__;

void EXTI0_1_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
	xTaskNotifyFromISR(__BUTTON_HANDLER__,(uint32_t)~0, eSetBits,NULL);//Send notify to vButtonTask;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <EXTI0_1_IRQHandler+0x2c>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	4259      	negs	r1, r3
 800061a:	2300      	movs	r3, #0
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2201      	movs	r2, #1
 8000622:	f001 fd9b 	bl	800215c <xTaskGenericNotifyFromISR>
	EXTI->PR |= EXTI_PR_PIF0;//Clear Interrupt
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <EXTI0_1_IRQHandler+0x30>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <EXTI0_1_IRQHandler+0x30>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	615a      	str	r2, [r3, #20]
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000028 	.word	0x20000028
 800063c:	40010400 	.word	0x40010400

08000640 <vButtonTask>:
#include "FreeRTOS.h"
#include "task.h"
#include "PRMS_Tasks.h"

void vButtonTask(void* argument)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	__BUTTON_HANDLER__ = xTaskGetCurrentTaskHandle();
 8000648:	f001 fcc0 	bl	8001fcc <xTaskGetCurrentTaskHandle>
 800064c:	0002      	movs	r2, r0
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <vButtonTask+0x8c>)
 8000650:	601a      	str	r2, [r3, #0]
	uint32_t InterruptFlag;
	while(1)
	{
		InterruptFlag = ulTaskNotifyTake((uint32_t)~0, portMAX_DELAY);
 8000652:	2301      	movs	r3, #1
 8000654:	425a      	negs	r2, r3
 8000656:	2301      	movs	r3, #1
 8000658:	425b      	negs	r3, r3
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fd3b 	bl	80020d8 <ulTaskNotifyTake>
 8000662:	0003      	movs	r3, r0
 8000664:	60fb      	str	r3, [r7, #12]
		if(InterruptFlag == ((uint32_t)~0))
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	d1f2      	bne.n	8000652 <vButtonTask+0x12>
		{
			if((GPIOC->ODR & GPIO_ODR_6))
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <vButtonTask+0x90>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	2240      	movs	r2, #64	; 0x40
 8000672:	4013      	ands	r3, r2
 8000674:	d018      	beq.n	80006a8 <vButtonTask+0x68>
			{
				vTaskSuspend(__LED1_HANDLER__);
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <vButtonTask+0x94>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f858 	bl	8001730 <vTaskSuspend>
				vTaskSuspend(__LED2_HANDLER__);
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <vButtonTask+0x98>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	0018      	movs	r0, r3
 8000686:	f001 f853 	bl	8001730 <vTaskSuspend>
				GPIOC->BSRR |= GPIO_BSRR_BR_8;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <vButtonTask+0x90>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <vButtonTask+0x90>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0449      	lsls	r1, r1, #17
 8000694:	430a      	orrs	r2, r1
 8000696:	619a      	str	r2, [r3, #24]
				GPIOC->BSRR |= GPIO_BSRR_BR_9;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <vButtonTask+0x90>)
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <vButtonTask+0x90>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0489      	lsls	r1, r1, #18
 80006a2:	430a      	orrs	r2, r1
 80006a4:	619a      	str	r2, [r3, #24]
 80006a6:	e009      	b.n	80006bc <vButtonTask+0x7c>
			}
			else
			{
				vTaskResume(__LED1_HANDLER__);
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <vButtonTask+0x94>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f8cb 	bl	8001848 <vTaskResume>
				vTaskResume(__LED2_HANDLER__);
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <vButtonTask+0x98>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f8c6 	bl	8001848 <vTaskResume>
			}
			GPIOC->ODR ^= GPIO_ODR_6;
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <vButtonTask+0x90>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <vButtonTask+0x90>)
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	404a      	eors	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]
		InterruptFlag = ulTaskNotifyTake((uint32_t)~0, portMAX_DELAY);
 80006c8:	e7c3      	b.n	8000652 <vButtonTask+0x12>
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	20000028 	.word	0x20000028
 80006d0:	48000800 	.word	0x48000800
 80006d4:	20000030 	.word	0x20000030
 80006d8:	2000002c 	.word	0x2000002c

080006dc <vLed1Task>:

	}
}

void vLed1Task(void* argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	__LED1_HANDLER__ = xTaskGetCurrentTaskHandle();
 80006e4:	f001 fc72 	bl	8001fcc <xTaskGetCurrentTaskHandle>
 80006e8:	0002      	movs	r2, r0
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <vLed1Task+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
	vTaskSuspend(__LED1_HANDLER__);
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <vLed1Task+0x50>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f81c 	bl	8001730 <vTaskSuspend>
	while(1)
	{
		GPIOC->BSRR |= GPIO_BSRR_BR_8;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <vLed1Task+0x54>)
 80006fa:	699a      	ldr	r2, [r3, #24]
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <vLed1Task+0x54>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0449      	lsls	r1, r1, #17
 8000702:	430a      	orrs	r2, r1
 8000704:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 8000706:	23fa      	movs	r3, #250	; 0xfa
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 ffea 	bl	80016e4 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BS_8;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <vLed1Task+0x54>)
 8000712:	699a      	ldr	r2, [r3, #24]
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <vLed1Task+0x54>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0049      	lsls	r1, r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 800071e:	23fa      	movs	r3, #250	; 0xfa
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 ffde 	bl	80016e4 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BR_8;
 8000728:	e7e6      	b.n	80006f8 <vLed1Task+0x1c>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000030 	.word	0x20000030
 8000730:	48000800 	.word	0x48000800

08000734 <vLed2Task>:
	}
}

void vLed2Task(void* argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	__LED2_HANDLER__ = xTaskGetCurrentTaskHandle();
 800073c:	f001 fc46 	bl	8001fcc <xTaskGetCurrentTaskHandle>
 8000740:	0002      	movs	r2, r0
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <vLed2Task+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
	vTaskSuspend(__LED2_HANDLER__);
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <vLed2Task+0x50>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fff0 	bl	8001730 <vTaskSuspend>
	while(1)
	{
		GPIOC->BSRR |= GPIO_BSRR_BS_9;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <vLed2Task+0x54>)
 8000752:	699a      	ldr	r2, [r3, #24]
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <vLed2Task+0x54>)
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0089      	lsls	r1, r1, #2
 800075a:	430a      	orrs	r2, r1
 800075c:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	0018      	movs	r0, r3
 8000764:	f000 ffbe 	bl	80016e4 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BR_9;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <vLed2Task+0x54>)
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <vLed2Task+0x54>)
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	0489      	lsls	r1, r1, #18
 8000772:	430a      	orrs	r2, r1
 8000774:	619a      	str	r2, [r3, #24]
		vTaskDelay(1000);
 8000776:	23fa      	movs	r3, #250	; 0xfa
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 ffb2 	bl	80016e4 <vTaskDelay>
		GPIOC->BSRR |= GPIO_BSRR_BS_9;
 8000780:	e7e6      	b.n	8000750 <vLed2Task+0x1c>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	2000002c 	.word	0x2000002c
 8000788:	48000800 	.word	0x48000800

0800078c <vApplicationStackOverflowHook>:
	}
}

void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char* pcTaskName)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	while(1);
 8000796:	e7fe      	b.n	8000796 <vApplicationStackOverflowHook+0xa>

08000798 <main>:
extern void vLed2Task(void* argument);
extern void vButtonTask(void* argument);


int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af02      	add	r7, sp, #8
	PrmsInitialize();
 800079e:	f7ff fe8f 	bl	80004c0 <PrmsInitialize>

	xTaskCreate(vButtonTask,"BUTTON",128,NULL, 1, NULL);
 80007a2:	4910      	ldr	r1, [pc, #64]	; (80007e4 <main+0x4c>)
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <main+0x50>)
 80007a6:	2300      	movs	r3, #0
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	f000 fe5c 	bl	800146e <xTaskCreate>
	xTaskCreate(vLed1Task, "LED", 128, NULL, 1, NULL);
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <main+0x54>)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <main+0x58>)
 80007ba:	2300      	movs	r3, #0
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	2301      	movs	r3, #1
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2300      	movs	r3, #0
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	f000 fe52 	bl	800146e <xTaskCreate>
	xTaskCreate(vLed2Task, "LED1", 128, NULL, 1, NULL);
 80007ca:	490a      	ldr	r1, [pc, #40]	; (80007f4 <main+0x5c>)
 80007cc:	480a      	ldr	r0, [pc, #40]	; (80007f8 <main+0x60>)
 80007ce:	2300      	movs	r3, #0
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	f000 fe48 	bl	800146e <xTaskCreate>
	vTaskStartScheduler();
 80007de:	f001 f881 	bl	80018e4 <vTaskStartScheduler>
	for(;;);
 80007e2:	e7fe      	b.n	80007e2 <main+0x4a>
 80007e4:	08002a08 	.word	0x08002a08
 80007e8:	08000641 	.word	0x08000641
 80007ec:	08002a10 	.word	0x08002a10
 80007f0:	080006dd 	.word	0x080006dd
 80007f4:	08002a14 	.word	0x08002a14
 80007f8:	08000735 	.word	0x08000735

080007fc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2207      	movs	r2, #7
 800080c:	4013      	ands	r3, r2
 800080e:	d004      	beq.n	800081a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2207      	movs	r2, #7
 8000814:	4393      	bics	r3, r2
 8000816:	3308      	adds	r3, #8
 8000818:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800081a:	f001 f89f 	bl	800195c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <pvPortMalloc+0x7c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d105      	bne.n	8000832 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <pvPortMalloc+0x80>)
 8000828:	2207      	movs	r2, #7
 800082a:	4393      	bics	r3, r2
 800082c:	001a      	movs	r2, r3
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <pvPortMalloc+0x7c>)
 8000830:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <pvPortMalloc+0x84>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <pvPortMalloc+0x88>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d813      	bhi.n	8000868 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <pvPortMalloc+0x84>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	18d2      	adds	r2, r2, r3
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <pvPortMalloc+0x84>)
 800084a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800084c:	429a      	cmp	r2, r3
 800084e:	d90b      	bls.n	8000868 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <pvPortMalloc+0x7c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <pvPortMalloc+0x84>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <pvPortMalloc+0x84>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	18d2      	adds	r2, r2, r3
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <pvPortMalloc+0x84>)
 8000866:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000868:	f001 f884 	bl	8001974 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800086c:	68fb      	ldr	r3, [r7, #12]
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	20001838 	.word	0x20001838
 800087c:	2000003c 	.word	0x2000003c
 8000880:	20001834 	.word	0x20001834
 8000884:	000017f7 	.word	0x000017f7

08000888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <vPortFree+0x12>
 8000896:	b672      	cpsid	i
 8000898:	e7fe      	b.n	8000898 <vPortFree+0x10>
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3308      	adds	r3, #8
 80008ae:	001a      	movs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2201      	movs	r2, #1
 80008b8:	4252      	negs	r2, r2
 80008ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3308      	adds	r3, #8
 80008c0:	001a      	movs	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3308      	adds	r3, #8
 80008ca:	001a      	movs	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}

080008de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b004      	add	sp, #16
 8000936:	bd80      	pop	{r7, pc}

08000938 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	3301      	adds	r3, #1
 800094c:	d103      	bne.n	8000956 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e00c      	b.n	8000970 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3308      	adds	r3, #8
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e002      	b.n	8000964 <vListInsert+0x2c>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	429a      	cmp	r2, r3
 800096e:	d2f6      	bcs.n	800095e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b004      	add	sp, #16
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	6892      	ldr	r2, [r2, #8]
 80009ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	6852      	ldr	r2, [r2, #4]
 80009c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d103      	bne.n	80009d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b004      	add	sp, #16
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3b04      	subs	r3, #4
 8000a04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0452      	lsls	r2, r2, #17
 8000a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3b04      	subs	r3, #4
 8000a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3b04      	subs	r3, #4
 8000a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <pxPortInitialiseStack+0x50>)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3b14      	subs	r3, #20
 8000a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3b20      	subs	r3, #32
 8000a36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000a38:	68fb      	ldr	r3, [r7, #12]
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	08000a49 	.word	0x08000a49

08000a48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <prvTaskExitError+0x28>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	d001      	beq.n	8000a5e <prvTaskExitError+0x16>
 8000a5a:	b672      	cpsid	i
 8000a5c:	e7fe      	b.n	8000a5c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8000a5e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0fc      	beq.n	8000a62 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b002      	add	sp, #8
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000004 	.word	0x20000004
	...

08000a80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <pxCurrentTCBConst2>)
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	3020      	adds	r0, #32
 8000a88:	f380 8809 	msr	PSP, r0
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f380 8814 	msr	CONTROL, r0
 8000a92:	f3bf 8f6f 	isb	sy
 8000a96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8000a98:	46ae      	mov	lr, r5
 8000a9a:	bc08      	pop	{r3}
 8000a9c:	bc04      	pop	{r2}
 8000a9e:	b662      	cpsie	i
 8000aa0:	4718      	bx	r3
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46c0      	nop			; (mov r8, r8)

08000ab0 <pxCurrentTCBConst2>:
 8000ab0:	2000183c 	.word	0x2000183c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46c0      	nop			; (mov r8, r8)

08000ab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <xPortStartScheduler+0x40>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <xPortStartScheduler+0x40>)
 8000ac2:	21ff      	movs	r1, #255	; 0xff
 8000ac4:	0409      	lsls	r1, r1, #16
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <xPortStartScheduler+0x40>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <xPortStartScheduler+0x40>)
 8000ad0:	21ff      	movs	r1, #255	; 0xff
 8000ad2:	0609      	lsls	r1, r1, #24
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000ad8:	f000 f898 	bl	8000c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <xPortStartScheduler+0x44>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8000ae2:	f7ff ffcd 	bl	8000a80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000ae6:	f001 f88f 	bl	8001c08 <vTaskSwitchContext>
	prvTaskExitError();
 8000aea:	f7ff ffad 	bl	8000a48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	e000ed20 	.word	0xe000ed20
 8000afc:	20000004 	.word	0x20000004

08000b00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <vPortYield+0x1c>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	0552      	lsls	r2, r2, #21
 8000b0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8000b0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8000b10:	f3bf 8f6f 	isb	sy
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	e000ed04 	.word	0xe000ed04

08000b20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8000b24:	b672      	cpsid	i
	uxCriticalNesting++;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <vPortEnterCritical+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <vPortEnterCritical+0x20>)
 8000b2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8000b30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8000b34:	f3bf 8f6f 	isb	sy
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000004 	.word	0x20000004

08000b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <vPortExitCritical+0x2c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <vPortExitCritical+0x10>
 8000b50:	b672      	cpsid	i
 8000b52:	e7fe      	b.n	8000b52 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <vPortExitCritical+0x2c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	1e5a      	subs	r2, r3, #1
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <vPortExitCritical+0x2c>)
 8000b5c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <vPortExitCritical+0x2c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d100      	bne.n	8000b68 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8000b66:	b662      	cpsie	i
	}
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	20000004 	.word	0x20000004

08000b74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8000b74:	f3ef 8010 	mrs	r0, PRIMASK
 8000b78:	b672      	cpsid	i
 8000b7a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	0018      	movs	r0, r3

08000b80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8000b80:	f380 8810 	msr	PRIMASK, r0
 8000b84:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8000b86:	46c0      	nop			; (mov r8, r8)
	...

08000b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000b90:	f3ef 8009 	mrs	r0, PSP
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <pxCurrentTCBConst>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	3820      	subs	r0, #32
 8000b9a:	6010      	str	r0, [r2, #0]
 8000b9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8000b9e:	4644      	mov	r4, r8
 8000ba0:	464d      	mov	r5, r9
 8000ba2:	4656      	mov	r6, sl
 8000ba4:	465f      	mov	r7, fp
 8000ba6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8000ba8:	b508      	push	{r3, lr}
 8000baa:	b672      	cpsid	i
 8000bac:	f001 f82c 	bl	8001c08 <vTaskSwitchContext>
 8000bb0:	b662      	cpsie	i
 8000bb2:	bc0c      	pop	{r2, r3}
 8000bb4:	6811      	ldr	r1, [r2, #0]
 8000bb6:	6808      	ldr	r0, [r1, #0]
 8000bb8:	3010      	adds	r0, #16
 8000bba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8000bbc:	46a0      	mov	r8, r4
 8000bbe:	46a9      	mov	r9, r5
 8000bc0:	46b2      	mov	sl, r6
 8000bc2:	46bb      	mov	fp, r7
 8000bc4:	f380 8809 	msr	PSP, r0
 8000bc8:	3820      	subs	r0, #32
 8000bca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8000bcc:	4718      	bx	r3
 8000bce:	46c0      	nop			; (mov r8, r8)

08000bd0 <pxCurrentTCBConst>:
 8000bd0:	2000183c 	.word	0x2000183c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46c0      	nop			; (mov r8, r8)

08000bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bde:	f7ff ffc9 	bl	8000b74 <ulSetInterruptMaskFromISR>
 8000be2:	0003      	movs	r3, r0
 8000be4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000be6:	f000 ff5f 	bl	8001aa8 <xTaskIncrementTick>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d003      	beq.n	8000bf6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SysTick_Handler+0x30>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	0552      	lsls	r2, r2, #21
 8000bf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ffc1 	bl	8000b80 <vClearInterruptMaskFromISR>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	e000ed04 	.word	0xe000ed04

08000c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <vPortSetupTimerInterrupt+0x34>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <vPortSetupTimerInterrupt+0x38>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <vPortSetupTimerInterrupt+0x3c>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	23fa      	movs	r3, #250	; 0xfa
 8000c22:	0099      	lsls	r1, r3, #2
 8000c24:	0010      	movs	r0, r2
 8000c26:	f7ff fa6f 	bl	8000108 <__udivsi3>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <vPortSetupTimerInterrupt+0x40>)
 8000c30:	3a01      	subs	r2, #1
 8000c32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <vPortSetupTimerInterrupt+0x34>)
 8000c36:	2207      	movs	r2, #7
 8000c38:	601a      	str	r2, [r3, #0]
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	e000e010 	.word	0xe000e010
 8000c44:	e000e018 	.word	0xe000e018
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	e000e014 	.word	0xe000e014

08000c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <xQueueGenericReset+0x18>
 8000c64:	b672      	cpsid	i
 8000c66:	e7fe      	b.n	8000c66 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8000c68:	f7ff ff5a 	bl	8000b20 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	434b      	muls	r3, r1
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	1e59      	subs	r1, r3, #1
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	434b      	muls	r3, r1
 8000c9e:	18d2      	adds	r2, r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2244      	movs	r2, #68	; 0x44
 8000ca8:	21ff      	movs	r1, #255	; 0xff
 8000caa:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2245      	movs	r2, #69	; 0x45
 8000cb0:	21ff      	movs	r1, #255	; 0xff
 8000cb2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10d      	bne.n	8000cd6 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d013      	beq.n	8000cea <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3310      	adds	r3, #16
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 f844 	bl	8001d54 <xTaskRemoveFromEventList>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d00c      	beq.n	8000cea <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000cd0:	f7ff ff16 	bl	8000b00 <vPortYield>
 8000cd4:	e009      	b.n	8000cea <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3310      	adds	r3, #16
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fde1 	bl	80008a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3324      	adds	r3, #36	; 0x24
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fddc 	bl	80008a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000cea:	f7ff ff2b 	bl	8000b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b004      	add	sp, #16
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08b      	sub	sp, #44	; 0x2c
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <xQueueGenericCreate+0x18>
 8000d0c:	b672      	cpsid	i
 8000d0e:	e7fe      	b.n	8000d0e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	4353      	muls	r3, r2
 8000d16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3350      	adds	r3, #80	; 0x50
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff fd6d 	bl	80007fc <pvPortMalloc>
 8000d22:	0003      	movs	r3, r0
 8000d24:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00e      	beq.n	8000d4a <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3350      	adds	r3, #80	; 0x50
 8000d34:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781c      	ldrb	r4, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	0023      	movs	r3, r4
 8000d46:	f000 f805 	bl	8000d54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000d4a:	69bb      	ldr	r3, [r7, #24]
	}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b009      	add	sp, #36	; 0x24
 8000d52:	bd90      	pop	{r4, r7, pc}

08000d54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	001a      	movs	r2, r3
 8000d62:	1cfb      	adds	r3, r7, #3
 8000d64:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d103      	bne.n	8000d74 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e002      	b.n	8000d7a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff60 	bl	8000c50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	1cfa      	adds	r2, r7, #3
 8000d94:	214c      	movs	r1, #76	; 0x4c
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b004      	add	sp, #16
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b08a      	sub	sp, #40	; 0x28
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <xQueueGenericSend+0x20>
 8000dbe:	b672      	cpsid	i
 8000dc0:	e7fe      	b.n	8000dc0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d103      	bne.n	8000dd0 <xQueueGenericSend+0x2e>
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <xQueueGenericSend+0x32>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <xQueueGenericSend+0x34>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <xQueueGenericSend+0x3c>
 8000dda:	b672      	cpsid	i
 8000ddc:	e7fe      	b.n	8000ddc <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d103      	bne.n	8000dec <xQueueGenericSend+0x4a>
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <xQueueGenericSend+0x4e>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <xQueueGenericSend+0x50>
 8000df0:	2300      	movs	r3, #0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <xQueueGenericSend+0x58>
 8000df6:	b672      	cpsid	i
 8000df8:	e7fe      	b.n	8000df8 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dfa:	f001 f8f5 	bl	8001fe8 <xTaskGetSchedulerState>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d102      	bne.n	8000e08 <xQueueGenericSend+0x66>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <xQueueGenericSend+0x6a>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <xQueueGenericSend+0x6c>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <xQueueGenericSend+0x74>
 8000e12:	b672      	cpsid	i
 8000e14:	e7fe      	b.n	8000e14 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e16:	f7ff fe83 	bl	8000b20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d302      	bcc.n	8000e2c <xQueueGenericSend+0x8a>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d11e      	bne.n	8000e6a <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 f9a2 	bl	800117c <prvCopyDataToQueue>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d009      	beq.n	8000e58 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	3324      	adds	r3, #36	; 0x24
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 ff83 	bl	8001d54 <xTaskRemoveFromEventList>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d007      	beq.n	8000e62 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e52:	f7ff fe55 	bl	8000b00 <vPortYield>
 8000e56:	e004      	b.n	8000e62 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e5e:	f7ff fe4f 	bl	8000b00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e62:	f7ff fe6f 	bl	8000b44 <vPortExitCritical>
				return pdPASS;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e05b      	b.n	8000f22 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d103      	bne.n	8000e78 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e70:	f7ff fe68 	bl	8000b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e054      	b.n	8000f22 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d106      	bne.n	8000e8c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e7e:	2314      	movs	r3, #20
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 ffc2 	bl	8001e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e8c:	f7ff fe5a 	bl	8000b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e90:	f000 fd64 	bl	800195c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e94:	f7ff fe44 	bl	8000b20 <vPortEnterCritical>
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	2244      	movs	r2, #68	; 0x44
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	d103      	bne.n	8000eac <xQueueGenericSend+0x10a>
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	2244      	movs	r2, #68	; 0x44
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	5499      	strb	r1, [r3, r2]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	2245      	movs	r2, #69	; 0x45
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	d103      	bne.n	8000ec0 <xQueueGenericSend+0x11e>
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	2245      	movs	r2, #69	; 0x45
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	5499      	strb	r1, [r3, r2]
 8000ec0:	f7ff fe40 	bl	8000b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ec4:	1d3a      	adds	r2, r7, #4
 8000ec6:	2314      	movs	r3, #20
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 ffb1 	bl	8001e34 <xTaskCheckForTimeOut>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d11e      	bne.n	8000f14 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fa54 	bl	8001386 <prvIsQueueFull>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d011      	beq.n	8000f06 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	3310      	adds	r3, #16
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	0011      	movs	r1, r2
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 feee 	bl	8001ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f9d3 	bl	800129e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000ef8:	f000 fd3c 	bl	8001974 <xTaskResumeAll>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d18a      	bne.n	8000e16 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8000f00:	f7ff fdfe 	bl	8000b00 <vPortYield>
 8000f04:	e787      	b.n	8000e16 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 f9c8 	bl	800129e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f0e:	f000 fd31 	bl	8001974 <xTaskResumeAll>
 8000f12:	e780      	b.n	8000e16 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 f9c1 	bl	800129e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f1c:	f000 fd2a 	bl	8001974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f20:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b00a      	add	sp, #40	; 0x28
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f2a:	b590      	push	{r4, r7, lr}
 8000f2c:	b08b      	sub	sp, #44	; 0x2c
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <xQueueGenericSendFromISR+0x1c>
 8000f42:	b672      	cpsid	i
 8000f44:	e7fe      	b.n	8000f44 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d103      	bne.n	8000f54 <xQueueGenericSendFromISR+0x2a>
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <xQueueGenericSendFromISR+0x2e>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <xQueueGenericSendFromISR+0x30>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <xQueueGenericSendFromISR+0x38>
 8000f5e:	b672      	cpsid	i
 8000f60:	e7fe      	b.n	8000f60 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d103      	bne.n	8000f70 <xQueueGenericSendFromISR+0x46>
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <xQueueGenericSendFromISR+0x4a>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <xQueueGenericSendFromISR+0x4c>
 8000f74:	2300      	movs	r3, #0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <xQueueGenericSendFromISR+0x54>
 8000f7a:	b672      	cpsid	i
 8000f7c:	e7fe      	b.n	8000f7c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f7e:	f7ff fdf9 	bl	8000b74 <ulSetInterruptMaskFromISR>
 8000f82:	0003      	movs	r3, r0
 8000f84:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d302      	bcc.n	8000f98 <xQueueGenericSendFromISR+0x6e>
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d131      	bne.n	8000ffc <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f98:	241b      	movs	r4, #27
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	6a3a      	ldr	r2, [r7, #32]
 8000f9e:	2145      	movs	r1, #69	; 0x45
 8000fa0:	5c52      	ldrb	r2, [r2, r1]
 8000fa2:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 f8e3 	bl	800117c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	d111      	bne.n	8000fe4 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d016      	beq.n	8000ff6 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	3324      	adds	r3, #36	; 0x24
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 fec1 	bl	8001d54 <xTaskRemoveFromEventList>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d00f      	beq.n	8000ff6 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00c      	beq.n	8000ff6 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e008      	b.n	8000ff6 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000fe4:	231b      	movs	r3, #27
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	b259      	sxtb	r1, r3
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	2245      	movs	r2, #69	; 0x45
 8000ff4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8000ffa:	e001      	b.n	8001000 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff fdbc 	bl	8000b80 <vClearInterruptMaskFromISR>

	return xReturn;
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b00b      	add	sp, #44	; 0x2c
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b08a      	sub	sp, #40	; 0x28
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <xQueueReceive+0x1e>
 800102c:	b672      	cpsid	i
 800102e:	e7fe      	b.n	800102e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <xQueueReceive+0x2c>
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <xQueueReceive+0x30>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <xQueueReceive+0x32>
 8001042:	2300      	movs	r3, #0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <xQueueReceive+0x3a>
 8001048:	b672      	cpsid	i
 800104a:	e7fe      	b.n	800104a <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800104c:	f000 ffcc 	bl	8001fe8 <xTaskGetSchedulerState>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d102      	bne.n	800105a <xQueueReceive+0x48>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <xQueueReceive+0x4c>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <xQueueReceive+0x4e>
 800105e:	2300      	movs	r3, #0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <xQueueReceive+0x56>
 8001064:	b672      	cpsid	i
 8001066:	e7fe      	b.n	8001066 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001068:	f7ff fd5a 	bl	8000b20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d01a      	beq.n	80010ae <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f8e7 	bl	8001252 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	3310      	adds	r3, #16
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fe5b 	bl	8001d54 <xTaskRemoveFromEventList>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80010a2:	f7ff fd2d 	bl	8000b00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80010a6:	f7ff fd4d 	bl	8000b44 <vPortExitCritical>
				return pdPASS;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e062      	b.n	8001174 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010b4:	f7ff fd46 	bl	8000b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e05b      	b.n	8001174 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010c2:	2314      	movs	r3, #20
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 fea0 	bl	8001e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010d0:	f7ff fd38 	bl	8000b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010d4:	f000 fc42 	bl	800195c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010d8:	f7ff fd22 	bl	8000b20 <vPortEnterCritical>
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	2244      	movs	r2, #68	; 0x44
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	d103      	bne.n	80010f0 <xQueueReceive+0xde>
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	5499      	strb	r1, [r3, r2]
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	2245      	movs	r2, #69	; 0x45
 80010f4:	5c9b      	ldrb	r3, [r3, r2]
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	d103      	bne.n	8001104 <xQueueReceive+0xf2>
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	2245      	movs	r2, #69	; 0x45
 8001100:	2100      	movs	r1, #0
 8001102:	5499      	strb	r1, [r3, r2]
 8001104:	f7ff fd1e 	bl	8000b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001108:	1d3a      	adds	r2, r7, #4
 800110a:	2314      	movs	r3, #20
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fe8f 	bl	8001e34 <xTaskCheckForTimeOut>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d11e      	bne.n	8001158 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 f91c 	bl	800135a <prvIsQueueEmpty>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d011      	beq.n	800114a <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	3324      	adds	r3, #36	; 0x24
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	0011      	movs	r1, r2
 800112e:	0018      	movs	r0, r3
 8001130:	f000 fdcc 	bl	8001ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f8b1 	bl	800129e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800113c:	f000 fc1a 	bl	8001974 <xTaskResumeAll>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d191      	bne.n	8001068 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8001144:	f7ff fcdc 	bl	8000b00 <vPortYield>
 8001148:	e78e      	b.n	8001068 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	0018      	movs	r0, r3
 800114e:	f000 f8a6 	bl	800129e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001152:	f000 fc0f 	bl	8001974 <xTaskResumeAll>
 8001156:	e787      	b.n	8001068 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f89f 	bl	800129e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001160:	f000 fc08 	bl	8001974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	0018      	movs	r0, r3
 8001168:	f000 f8f7 	bl	800135a <prvIsQueueEmpty>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d100      	bne.n	8001172 <xQueueReceive+0x160>
 8001170:	e77a      	b.n	8001068 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001172:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b00a      	add	sp, #40	; 0x28
 800117a:	bd80      	pop	{r7, pc}

0800117c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10e      	bne.n	80011b8 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d14e      	bne.n	8001240 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 ff3a 	bl	8002020 <xTaskPriorityDisinherit>
 80011ac:	0003      	movs	r3, r0
 80011ae:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	e043      	b.n	8001240 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6858      	ldr	r0, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	0019      	movs	r1, r3
 80011ca:	f001 fbff 	bl	80029cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	18d2      	adds	r2, r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d32b      	bcc.n	8001240 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	e026      	b.n	8001240 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	68d8      	ldr	r0, [r3, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	0019      	movs	r1, r3
 80011fe:	f001 fbe5 	bl	80029cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	425b      	negs	r3, r3
 800120c:	18d2      	adds	r2, r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d207      	bcs.n	800122e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	425b      	negs	r3, r3
 8001228:	18d2      	adds	r2, r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d105      	bne.n	8001240 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	3b01      	subs	r3, #1
 800123e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001248:	697b      	ldr	r3, [r7, #20]
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b006      	add	sp, #24
 8001250:	bd80      	pop	{r7, pc}

08001252 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	2b00      	cmp	r3, #0
 8001262:	d018      	beq.n	8001296 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	18d2      	adds	r2, r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	429a      	cmp	r2, r3
 800127c:	d303      	bcc.n	8001286 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fb9b 	bl	80029cc <memcpy>
	}
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}

0800129e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80012a6:	f7ff fc3b 	bl	8000b20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80012aa:	230f      	movs	r3, #15
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	2145      	movs	r1, #69	; 0x45
 80012b2:	5c52      	ldrb	r2, [r2, r1]
 80012b4:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012b6:	e013      	b.n	80012e0 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d016      	beq.n	80012ee <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3324      	adds	r3, #36	; 0x24
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fd45 	bl	8001d54 <xTaskRemoveFromEventList>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80012ce:	f000 fe01 	bl	8001ed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80012d2:	210f      	movs	r1, #15
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012e0:	230f      	movs	r3, #15
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dce5      	bgt.n	80012b8 <prvUnlockQueue+0x1a>
 80012ec:	e000      	b.n	80012f0 <prvUnlockQueue+0x52>
					break;
 80012ee:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2245      	movs	r2, #69	; 0x45
 80012f4:	21ff      	movs	r1, #255	; 0xff
 80012f6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80012f8:	f7ff fc24 	bl	8000b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80012fc:	f7ff fc10 	bl	8000b20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001300:	230e      	movs	r3, #14
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	2144      	movs	r1, #68	; 0x44
 8001308:	5c52      	ldrb	r2, [r2, r1]
 800130a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800130c:	e013      	b.n	8001336 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d016      	beq.n	8001344 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3310      	adds	r3, #16
 800131a:	0018      	movs	r0, r3
 800131c:	f000 fd1a 	bl	8001d54 <xTaskRemoveFromEventList>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8001324:	f000 fdd6 	bl	8001ed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001328:	210e      	movs	r1, #14
 800132a:	187b      	adds	r3, r7, r1
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3b01      	subs	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	187b      	adds	r3, r7, r1
 8001334:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001336:	230e      	movs	r3, #14
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	dce5      	bgt.n	800130e <prvUnlockQueue+0x70>
 8001342:	e000      	b.n	8001346 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8001344:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2244      	movs	r2, #68	; 0x44
 800134a:	21ff      	movs	r1, #255	; 0xff
 800134c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800134e:	f7ff fbf9 	bl	8000b44 <vPortExitCritical>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001362:	f7ff fbdd 	bl	8000b20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800136e:	2301      	movs	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e001      	b.n	8001378 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001378:	f7ff fbe4 	bl	8000b44 <vPortExitCritical>

	return xReturn;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}

08001386 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800138e:	f7ff fbc7 	bl	8000b20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139a:	429a      	cmp	r2, r3
 800139c:	d102      	bne.n	80013a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e001      	b.n	80013a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013a8:	f7ff fbcc 	bl	8000b44 <vPortExitCritical>

	return xReturn;
 80013ac:	68fb      	ldr	r3, [r7, #12]
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b004      	add	sp, #16
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e015      	b.n	80013f4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <vQueueAddToRegistry+0x4c>)
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	00d2      	lsls	r2, r2, #3
 80013ce:	58d3      	ldr	r3, [r2, r3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10c      	bne.n	80013ee <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <vQueueAddToRegistry+0x4c>)
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <vQueueAddToRegistry+0x4c>)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	18d3      	adds	r3, r2, r3
 80013e6:	3304      	adds	r3, #4
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80013ec:	e005      	b.n	80013fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3301      	adds	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d9e6      	bls.n	80013c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20001964 	.word	0x20001964

08001408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001418:	f7ff fb82 	bl	8000b20 <vPortEnterCritical>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2244      	movs	r2, #68	; 0x44
 8001420:	5c9b      	ldrb	r3, [r3, r2]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	d103      	bne.n	8001430 <vQueueWaitForMessageRestricted+0x28>
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2244      	movs	r2, #68	; 0x44
 800142c:	2100      	movs	r1, #0
 800142e:	5499      	strb	r1, [r3, r2]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2245      	movs	r2, #69	; 0x45
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	b25b      	sxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	d103      	bne.n	8001444 <vQueueWaitForMessageRestricted+0x3c>
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2245      	movs	r2, #69	; 0x45
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]
 8001444:	f7ff fb7e 	bl	8000b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3324      	adds	r3, #36	; 0x24
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	0018      	movs	r0, r3
 800145a:	f000 fc55 	bl	8001d08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff1c 	bl	800129e <prvUnlockQueue>
	}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b006      	add	sp, #24
 800146c:	bd80      	pop	{r7, pc}

0800146e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800146e:	b590      	push	{r4, r7, lr}
 8001470:	b08d      	sub	sp, #52	; 0x34
 8001472:	af04      	add	r7, sp, #16
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	1dbb      	adds	r3, r7, #6
 800147c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff f9b9 	bl	80007fc <pvPortMalloc>
 800148a:	0003      	movs	r3, r0
 800148c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d010      	beq.n	80014b6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001494:	2058      	movs	r0, #88	; 0x58
 8001496:	f7ff f9b1 	bl	80007fc <pvPortMalloc>
 800149a:	0003      	movs	r3, r0
 800149c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30
 80014aa:	e006      	b.n	80014ba <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff f9ea 	bl	8000888 <vPortFree>
 80014b4:	e001      	b.n	80014ba <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d016      	beq.n	80014ee <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80014c0:	1dbb      	adds	r3, r7, #6
 80014c2:	881a      	ldrh	r2, [r3, #0]
 80014c4:	683c      	ldr	r4, [r7, #0]
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9303      	str	r3, [sp, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	0023      	movs	r3, r4
 80014dc:	f000 f810 	bl	8001500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f896 	bl	8001614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	e002      	b.n	80014f4 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014ee:	2301      	movs	r3, #1
 80014f0:	425b      	negs	r3, r3
 80014f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80014f4:	69bb      	ldr	r3, [r7, #24]
	}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b009      	add	sp, #36	; 0x24
 80014fc:	bd90      	pop	{r4, r7, pc}
	...

08001500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	001a      	movs	r2, r3
 8001518:	21a5      	movs	r1, #165	; 0xa5
 800151a:	f001 fa60 	bl	80029de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	493a      	ldr	r1, [pc, #232]	; (8001610 <prvInitialiseNewTask+0x110>)
 8001526:	468c      	mov	ip, r1
 8001528:	4463      	add	r3, ip
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	18d3      	adds	r3, r2, r3
 800152e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2207      	movs	r2, #7
 8001534:	4393      	bics	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2207      	movs	r2, #7
 800153c:	4013      	ands	r3, r2
 800153e:	d001      	beq.n	8001544 <prvInitialiseNewTask+0x44>
 8001540:	b672      	cpsid	i
 8001542:	e7fe      	b.n	8001542 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d020      	beq.n	800158c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e013      	b.n	8001578 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	18d3      	adds	r3, r2, r3
 8001556:	7818      	ldrb	r0, [r3, #0]
 8001558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800155a:	2134      	movs	r1, #52	; 0x34
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	18d3      	adds	r3, r2, r3
 8001560:	185b      	adds	r3, r3, r1
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b09      	cmp	r3, #9
 800157c:	d9e8      	bls.n	8001550 <prvInitialiseNewTask+0x50>
 800157e:	e000      	b.n	8001582 <prvInitialiseNewTask+0x82>
			{
				break;
 8001580:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001584:	223d      	movs	r2, #61	; 0x3d
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]
 800158a:	e003      	b.n	8001594 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	2234      	movs	r2, #52	; 0x34
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d901      	bls.n	800159e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	6a3a      	ldr	r2, [r7, #32]
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	2200      	movs	r2, #0
 80015ae:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	3304      	adds	r3, #4
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff f992 	bl	80008de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015bc:	3318      	adds	r3, #24
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff f98d 	bl	80008de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	2205      	movs	r2, #5
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2200      	movs	r2, #0
 80015de:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	2254      	movs	r2, #84	; 0x54
 80015e4:	2100      	movs	r1, #0
 80015e6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f7ff fa00 	bl	80009f4 <pxPortInitialiseStack>
 80015f4:	0002      	movs	r2, r0
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b006      	add	sp, #24
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	3fffffff 	.word	0x3fffffff

08001614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800161c:	f7ff fa80 	bl	8000b20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <prvAddNewTaskToReadyList+0xb8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <prvAddNewTaskToReadyList+0xb8>)
 8001628:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <prvAddNewTaskToReadyList+0xbc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001632:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <prvAddNewTaskToReadyList+0xbc>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <prvAddNewTaskToReadyList+0xb8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001640:	f000 fc62 	bl	8001f08 <prvInitialiseTaskLists>
 8001644:	e00d      	b.n	8001662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <prvAddNewTaskToReadyList+0xc0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <prvAddNewTaskToReadyList+0xbc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	429a      	cmp	r2, r3
 800165a:	d802      	bhi.n	8001662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <prvAddNewTaskToReadyList+0xbc>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <prvAddNewTaskToReadyList+0xc4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <prvAddNewTaskToReadyList+0xc4>)
 800166a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <prvAddNewTaskToReadyList+0xc4>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <prvAddNewTaskToReadyList+0xc8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d903      	bls.n	8001688 <prvAddNewTaskToReadyList+0x74>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <prvAddNewTaskToReadyList+0xc8>)
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168c:	0013      	movs	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	189b      	adds	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <prvAddNewTaskToReadyList+0xcc>)
 8001696:	189a      	adds	r2, r3, r2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3304      	adds	r3, #4
 800169c:	0019      	movs	r1, r3
 800169e:	0010      	movs	r0, r2
 80016a0:	f7ff f928 	bl	80008f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016a4:	f7ff fa4e 	bl	8000b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <prvAddNewTaskToReadyList+0xc0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <prvAddNewTaskToReadyList+0xbc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d201      	bcs.n	80016c2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016be:	f7ff fa1f 	bl	8000b00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	200018fc 	.word	0x200018fc
 80016d0:	2000183c 	.word	0x2000183c
 80016d4:	20001908 	.word	0x20001908
 80016d8:	20001918 	.word	0x20001918
 80016dc:	20001904 	.word	0x20001904
 80016e0:	20001840 	.word	0x20001840

080016e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d010      	beq.n	8001718 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <vTaskDelay+0x48>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <vTaskDelay+0x1e>
 80016fe:	b672      	cpsid	i
 8001700:	e7fe      	b.n	8001700 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8001702:	f000 f92b 	bl	800195c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2100      	movs	r1, #0
 800170a:	0018      	movs	r0, r3
 800170c:	f000 fdd8 	bl	80022c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001710:	f000 f930 	bl	8001974 <xTaskResumeAll>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800171e:	f7ff f9ef 	bl	8000b00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20001924 	.word	0x20001924

08001730 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001738:	f7ff f9f2 	bl	8000b20 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <vTaskSuspend+0x18>
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <vTaskSuspend+0xb8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	e000      	b.n	800174a <vTaskSuspend+0x1a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3304      	adds	r3, #4
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff f927 	bl	80009a4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3318      	adds	r3, #24
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff f91e 	bl	80009a4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1d1a      	adds	r2, r3, #4
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <vTaskSuspend+0xbc>)
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff f8bf 	bl	80008f4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2254      	movs	r2, #84	; 0x54
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d103      	bne.n	800178a <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2254      	movs	r2, #84	; 0x54
 8001786:	2100      	movs	r1, #0
 8001788:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800178a:	f7ff f9db 	bl	8000b44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <vTaskSuspend+0xc0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001796:	f7ff f9c3 	bl	8000b20 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800179a:	f000 fbf9 	bl	8001f90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800179e:	f7ff f9d1 	bl	8000b44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <vTaskSuspend+0xb8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d118      	bne.n	80017de <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <vTaskSuspend+0xc0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <vTaskSuspend+0xc4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <vTaskSuspend+0x90>
 80017bc:	b672      	cpsid	i
 80017be:	e7fe      	b.n	80017be <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80017c0:	f7ff f99e 	bl	8000b00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017c4:	e00b      	b.n	80017de <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <vTaskSuspend+0xbc>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <vTaskSuspend+0xc8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d103      	bne.n	80017da <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <vTaskSuspend+0xb8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	}
 80017d8:	e001      	b.n	80017de <vTaskSuspend+0xae>
					vTaskSwitchContext();
 80017da:	f000 fa15 	bl	8001c08 <vTaskSwitchContext>
	}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b004      	add	sp, #16
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	2000183c 	.word	0x2000183c
 80017ec:	200018e8 	.word	0x200018e8
 80017f0:	20001908 	.word	0x20001908
 80017f4:	20001924 	.word	0x20001924
 80017f8:	200018fc 	.word	0x200018fc

080017fc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <prvTaskIsTaskSuspended+0x1a>
 8001812:	b672      	cpsid	i
 8001814:	e7fe      	b.n	8001814 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <prvTaskIsTaskSuspended+0x44>)
 800181c:	429a      	cmp	r2, r3
 800181e:	d10a      	bne.n	8001836 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <prvTaskIsTaskSuspended+0x48>)
 8001826:	429a      	cmp	r2, r3
 8001828:	d005      	beq.n	8001836 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 8001832:	2301      	movs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001836:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200018e8 	.word	0x200018e8
 8001844:	200018d4 	.word	0x200018d4

08001848 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <vTaskResume+0x16>
 800185a:	b672      	cpsid	i
 800185c:	e7fe      	b.n	800185c <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <vTaskResume+0x90>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d032      	beq.n	80018ce <vTaskResume+0x86>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d02f      	beq.n	80018ce <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800186e:	f7ff f957 	bl	8000b20 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ffc1 	bl	80017fc <prvTaskIsTaskSuspended>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d025      	beq.n	80018ca <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	0018      	movs	r0, r3
 8001884:	f7ff f88e 	bl	80009a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <vTaskResume+0x94>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d903      	bls.n	800189c <vTaskResume+0x54>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <vTaskResume+0x94>)
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a0:	0013      	movs	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	189b      	adds	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <vTaskResume+0x98>)
 80018aa:	189a      	adds	r2, r3, r2
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3304      	adds	r3, #4
 80018b0:	0019      	movs	r1, r3
 80018b2:	0010      	movs	r0, r2
 80018b4:	f7ff f81e 	bl	80008f4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <vTaskResume+0x90>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d301      	bcc.n	80018ca <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80018c6:	f7ff f91b 	bl	8000b00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80018ca:	f7ff f93b 	bl	8000b44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	2000183c 	.word	0x2000183c
 80018dc:	20001904 	.word	0x20001904
 80018e0:	20001840 	.word	0x20001840

080018e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80018ea:	4916      	ldr	r1, [pc, #88]	; (8001944 <vTaskStartScheduler+0x60>)
 80018ec:	4816      	ldr	r0, [pc, #88]	; (8001948 <vTaskStartScheduler+0x64>)
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <vTaskStartScheduler+0x68>)
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2300      	movs	r3, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	f7ff fdb8 	bl	800146e <xTaskCreate>
 80018fe:	0003      	movs	r3, r0
 8001900:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d103      	bne.n	8001910 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 8001908:	f000 fd2e 	bl	8002368 <xTimerCreateTimerTask>
 800190c:	0003      	movs	r3, r0
 800190e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d10d      	bne.n	8001932 <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001916:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <vTaskStartScheduler+0x6c>)
 800191a:	2201      	movs	r2, #1
 800191c:	4252      	negs	r2, r2
 800191e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <vTaskStartScheduler+0x70>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <vTaskStartScheduler+0x74>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800192c:	f7ff f8c4 	bl	8000ab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001930:	e004      	b.n	800193c <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3301      	adds	r3, #1
 8001936:	d101      	bne.n	800193c <vTaskStartScheduler+0x58>
 8001938:	b672      	cpsid	i
 800193a:	e7fe      	b.n	800193a <vTaskStartScheduler+0x56>
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	08002a1c 	.word	0x08002a1c
 8001948:	08001ee9 	.word	0x08001ee9
 800194c:	20001920 	.word	0x20001920
 8001950:	2000191c 	.word	0x2000191c
 8001954:	20001908 	.word	0x20001908
 8001958:	20001900 	.word	0x20001900

0800195c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <vTaskSuspendAll+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	4b02      	ldr	r3, [pc, #8]	; (8001970 <vTaskSuspendAll+0x14>)
 8001968:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20001924 	.word	0x20001924

08001974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <xTaskResumeAll+0xf8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <xTaskResumeAll+0x1a>
 800198a:	b672      	cpsid	i
 800198c:	e7fe      	b.n	800198c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800198e:	f7ff f8c7 	bl	8000b20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <xTaskResumeAll+0xf8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1e5a      	subs	r2, r3, #1
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <xTaskResumeAll+0xf8>)
 800199a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <xTaskResumeAll+0xf8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d15b      	bne.n	8001a5c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <xTaskResumeAll+0xfc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d057      	beq.n	8001a5c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ac:	e02f      	b.n	8001a0e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <xTaskResumeAll+0x100>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3318      	adds	r3, #24
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7fe fff2 	bl	80009a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3304      	adds	r3, #4
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe ffed 	bl	80009a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <xTaskResumeAll+0x104>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d903      	bls.n	80019de <xTaskResumeAll+0x6a>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <xTaskResumeAll+0x104>)
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e2:	0013      	movs	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <xTaskResumeAll+0x108>)
 80019ec:	189a      	adds	r2, r3, r2
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3304      	adds	r3, #4
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f7fe ff7d 	bl	80008f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <xTaskResumeAll+0x10c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <xTaskResumeAll+0x110>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <xTaskResumeAll+0x100>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1cb      	bne.n	80019ae <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a1c:	f000 fab8 	bl	8001f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <xTaskResumeAll+0x114>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00f      	beq.n	8001a4c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a2c:	f000 f83c 	bl	8001aa8 <xTaskIncrementTick>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d002      	beq.n	8001a3a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <xTaskResumeAll+0x110>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f2      	bne.n	8001a2c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <xTaskResumeAll+0x114>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <xTaskResumeAll+0x110>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a58:	f7ff f852 	bl	8000b00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a5c:	f7ff f872 	bl	8000b44 <vPortExitCritical>

	return xAlreadyYielded;
 8001a60:	68bb      	ldr	r3, [r7, #8]
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	20001924 	.word	0x20001924
 8001a70:	200018fc 	.word	0x200018fc
 8001a74:	200018d4 	.word	0x200018d4
 8001a78:	20001904 	.word	0x20001904
 8001a7c:	20001840 	.word	0x20001840
 8001a80:	2000183c 	.word	0x2000183c
 8001a84:	20001910 	.word	0x20001910
 8001a88:	2000190c 	.word	0x2000190c

08001a8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <xTaskGetTickCount+0x18>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	20001900 	.word	0x20001900

08001aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <xTaskIncrementTick+0x134>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d000      	beq.n	8001abc <xTaskIncrementTick+0x14>
 8001aba:	e084      	b.n	8001bc6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001abc:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <xTaskIncrementTick+0x138>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <xTaskIncrementTick+0x138>)
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d117      	bne.n	8001b00 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ad0:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <xTaskIncrementTick+0x13c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <xTaskIncrementTick+0x36>
 8001ada:	b672      	cpsid	i
 8001adc:	e7fe      	b.n	8001adc <xTaskIncrementTick+0x34>
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <xTaskIncrementTick+0x13c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <xTaskIncrementTick+0x140>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <xTaskIncrementTick+0x13c>)
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <xTaskIncrementTick+0x140>)
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <xTaskIncrementTick+0x144>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <xTaskIncrementTick+0x144>)
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	f000 fa48 	bl	8001f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <xTaskIncrementTick+0x148>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d349      	bcc.n	8001b9e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <xTaskIncrementTick+0x13c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <xTaskIncrementTick+0x148>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	4252      	negs	r2, r2
 8001b1a:	601a      	str	r2, [r3, #0]
					break;
 8001b1c:	e03f      	b.n	8001b9e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <xTaskIncrementTick+0x13c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d203      	bcs.n	8001b3e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <xTaskIncrementTick+0x148>)
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b3c:	e02f      	b.n	8001b9e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	3304      	adds	r3, #4
 8001b42:	0018      	movs	r0, r3
 8001b44:	f7fe ff2e 	bl	80009a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	3318      	adds	r3, #24
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7fe ff25 	bl	80009a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <xTaskIncrementTick+0x14c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d903      	bls.n	8001b6e <xTaskIncrementTick+0xc6>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <xTaskIncrementTick+0x14c>)
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b72:	0013      	movs	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	189b      	adds	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <xTaskIncrementTick+0x150>)
 8001b7c:	189a      	adds	r2, r3, r2
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3304      	adds	r3, #4
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f7fe feb5 	bl	80008f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <xTaskIncrementTick+0x154>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3b8      	bcc.n	8001b0a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b9c:	e7b5      	b.n	8001b0a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <xTaskIncrementTick+0x154>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	4914      	ldr	r1, [pc, #80]	; (8001bf8 <xTaskIncrementTick+0x150>)
 8001ba6:	0013      	movs	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	189b      	adds	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	585b      	ldr	r3, [r3, r1]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d901      	bls.n	8001bb8 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <xTaskIncrementTick+0x158>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e004      	b.n	8001bd0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <xTaskIncrementTick+0x15c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <xTaskIncrementTick+0x15c>)
 8001bce:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001bd0:	697b      	ldr	r3, [r7, #20]
}
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b006      	add	sp, #24
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	20001924 	.word	0x20001924
 8001be0:	20001900 	.word	0x20001900
 8001be4:	200018cc 	.word	0x200018cc
 8001be8:	200018d0 	.word	0x200018d0
 8001bec:	20001914 	.word	0x20001914
 8001bf0:	2000191c 	.word	0x2000191c
 8001bf4:	20001904 	.word	0x20001904
 8001bf8:	20001840 	.word	0x20001840
 8001bfc:	2000183c 	.word	0x2000183c
 8001c00:	20001910 	.word	0x20001910
 8001c04:	2000190c 	.word	0x2000190c

08001c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <vTaskSwitchContext+0xb0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <vTaskSwitchContext+0xb4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c1c:	e048      	b.n	8001cb0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <vTaskSwitchContext+0xb4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <vTaskSwitchContext+0xb8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <vTaskSwitchContext+0xb8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d808      	bhi.n	8001c46 <vTaskSwitchContext+0x3e>
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <vTaskSwitchContext+0xb8>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <vTaskSwitchContext+0xb8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3334      	adds	r3, #52	; 0x34
 8001c3e:	0019      	movs	r1, r3
 8001c40:	0010      	movs	r0, r2
 8001c42:	f7fe fda3 	bl	800078c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <vTaskSwitchContext+0xbc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	e007      	b.n	8001c5e <vTaskSwitchContext+0x56>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <vTaskSwitchContext+0x50>
 8001c54:	b672      	cpsid	i
 8001c56:	e7fe      	b.n	8001c56 <vTaskSwitchContext+0x4e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	491a      	ldr	r1, [pc, #104]	; (8001cc8 <vTaskSwitchContext+0xc0>)
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	0013      	movs	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	189b      	adds	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	585b      	ldr	r3, [r3, r1]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <vTaskSwitchContext+0x46>
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	0013      	movs	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <vTaskSwitchContext+0xc0>)
 8001c7c:	189b      	adds	r3, r3, r2
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3308      	adds	r3, #8
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d104      	bne.n	8001ca0 <vTaskSwitchContext+0x98>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <vTaskSwitchContext+0xb8>)
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <vTaskSwitchContext+0xbc>)
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	601a      	str	r2, [r3, #0]
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20001924 	.word	0x20001924
 8001cbc:	20001910 	.word	0x20001910
 8001cc0:	2000183c 	.word	0x2000183c
 8001cc4:	20001904 	.word	0x20001904
 8001cc8:	20001840 	.word	0x20001840

08001ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <vTaskPlaceOnEventList+0x14>
 8001cdc:	b672      	cpsid	i
 8001cde:	e7fe      	b.n	8001cde <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <vTaskPlaceOnEventList+0x38>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	001a      	movs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0011      	movs	r1, r2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7fe fe23 	bl	8000938 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 fae2 	bl	80022c0 <prvAddCurrentTaskToDelayedList>
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000183c 	.word	0x2000183c

08001d08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <vTaskPlaceOnEventListRestricted+0x16>
 8001d1a:	b672      	cpsid	i
 8001d1c:	e7fe      	b.n	8001d1c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <vTaskPlaceOnEventListRestricted+0x48>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3318      	adds	r3, #24
 8001d24:	001a      	movs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0011      	movs	r1, r2
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7fe fde2 	bl	80008f4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0011      	movs	r1, r2
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fabc 	bl	80022c0 <prvAddCurrentTaskToDelayedList>
	}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000183c 	.word	0x2000183c

08001d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <xTaskRemoveFromEventList+0x1a>
 8001d6a:	b672      	cpsid	i
 8001d6c:	e7fe      	b.n	8001d6c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3318      	adds	r3, #24
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe fe16 	bl	80009a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <xTaskRemoveFromEventList+0xa0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d11d      	bne.n	8001dbc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3304      	adds	r3, #4
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe fe0d 	bl	80009a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <xTaskRemoveFromEventList+0xa4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d903      	bls.n	8001d9e <xTaskRemoveFromEventList+0x4a>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <xTaskRemoveFromEventList+0xa4>)
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da2:	0013      	movs	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	189b      	adds	r3, r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <xTaskRemoveFromEventList+0xa8>)
 8001dac:	189a      	adds	r2, r3, r2
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3304      	adds	r3, #4
 8001db2:	0019      	movs	r1, r3
 8001db4:	0010      	movs	r0, r2
 8001db6:	f7fe fd9d 	bl	80008f4 <vListInsertEnd>
 8001dba:	e007      	b.n	8001dcc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <xTaskRemoveFromEventList+0xac>)
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe fd94 	bl	80008f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <xTaskRemoveFromEventList+0xb0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d905      	bls.n	8001de6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <xTaskRemoveFromEventList+0xb4>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e001      	b.n	8001dea <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20001924 	.word	0x20001924
 8001df8:	20001904 	.word	0x20001904
 8001dfc:	20001840 	.word	0x20001840
 8001e00:	200018d4 	.word	0x200018d4
 8001e04:	2000183c 	.word	0x2000183c
 8001e08:	20001910 	.word	0x20001910

08001e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <vTaskInternalSetTimeOutState+0x20>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <vTaskInternalSetTimeOutState+0x24>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	605a      	str	r2, [r3, #4]
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20001914 	.word	0x20001914
 8001e30:	20001900 	.word	0x20001900

08001e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <xTaskCheckForTimeOut+0x14>
 8001e44:	b672      	cpsid	i
 8001e46:	e7fe      	b.n	8001e46 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <xTaskCheckForTimeOut+0x1e>
 8001e4e:	b672      	cpsid	i
 8001e50:	e7fe      	b.n	8001e50 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8001e52:	f7fe fe65 	bl	8000b20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <xTaskCheckForTimeOut+0x98>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e024      	b.n	8001ebe <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <xTaskCheckForTimeOut+0x9c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d007      	beq.n	8001e90 <xTaskCheckForTimeOut+0x5c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d302      	bcc.n	8001e90 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e016      	b.n	8001ebe <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20c      	bcs.n	8001eb4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad2      	subs	r2, r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff ffaf 	bl	8001e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e004      	b.n	8001ebe <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001ebe:	f7fe fe41 	bl	8000b44 <vPortExitCritical>

	return xReturn;
 8001ec2:	697b      	ldr	r3, [r7, #20]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b006      	add	sp, #24
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20001900 	.word	0x20001900
 8001ed0:	20001914 	.word	0x20001914

08001ed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <vTaskMissedYield+0x10>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20001910 	.word	0x20001910

08001ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ef0:	f000 f848 	bl	8001f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <prvIdleTask+0x1c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d9f9      	bls.n	8001ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001efc:	f7fe fe00 	bl	8000b00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8001f00:	e7f6      	b.n	8001ef0 <prvIdleTask+0x8>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	20001840 	.word	0x20001840

08001f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	e00c      	b.n	8001f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	0013      	movs	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	189b      	adds	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <prvInitialiseTaskLists+0x60>)
 8001f20:	189b      	adds	r3, r3, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe fcbd 	bl	80008a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d9ef      	bls.n	8001f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <prvInitialiseTaskLists+0x64>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7fe fcb3 	bl	80008a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <prvInitialiseTaskLists+0x68>)
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe fcaf 	bl	80008a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <prvInitialiseTaskLists+0x6c>)
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7fe fcab 	bl	80008a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <prvInitialiseTaskLists+0x70>)
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7fe fca7 	bl	80008a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <prvInitialiseTaskLists+0x74>)
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <prvInitialiseTaskLists+0x64>)
 8001f58:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <prvInitialiseTaskLists+0x78>)
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <prvInitialiseTaskLists+0x68>)
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20001840 	.word	0x20001840
 8001f6c:	200018a4 	.word	0x200018a4
 8001f70:	200018b8 	.word	0x200018b8
 8001f74:	200018d4 	.word	0x200018d4
 8001f78:	200018e8 	.word	0x200018e8
 8001f7c:	200018cc 	.word	0x200018cc
 8001f80:	200018d0 	.word	0x200018d0

08001f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <prvResetNextTaskUnblockTime+0x34>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <prvResetNextTaskUnblockTime+0x38>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4252      	negs	r2, r2
 8001fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001fa8:	e008      	b.n	8001fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <prvResetNextTaskUnblockTime+0x34>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <prvResetNextTaskUnblockTime+0x38>)
 8001fba:	601a      	str	r2, [r3, #0]
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200018cc 	.word	0x200018cc
 8001fc8:	2000191c 	.word	0x2000191c

08001fcc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <xTaskGetCurrentTaskHandle+0x18>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001fd8:	687b      	ldr	r3, [r7, #4]
	}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b002      	add	sp, #8
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	2000183c 	.word	0x2000183c

08001fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <xTaskGetSchedulerState+0x30>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	e008      	b.n	800200e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <xTaskGetSchedulerState+0x34>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002004:	2302      	movs	r3, #2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	e001      	b.n	800200e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800200e:	687b      	ldr	r3, [r7, #4]
	}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20001908 	.word	0x20001908
 800201c:	20001924 	.word	0x20001924

08002020 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d044      	beq.n	80020c0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <xTaskPriorityDisinherit+0xac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <xTaskPriorityDisinherit+0x24>
 8002040:	b672      	cpsid	i
 8002042:	e7fe      	b.n	8002042 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <xTaskPriorityDisinherit+0x30>
 800204c:	b672      	cpsid	i
 800204e:	e7fe      	b.n	800204e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	1e5a      	subs	r2, r3, #1
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002062:	429a      	cmp	r2, r3
 8002064:	d02c      	beq.n	80020c0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d128      	bne.n	80020c0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3304      	adds	r3, #4
 8002072:	0018      	movs	r0, r3
 8002074:	f7fe fc96 	bl	80009a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	2205      	movs	r2, #5
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <xTaskPriorityDisinherit+0xb0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d903      	bls.n	80020a0 <xTaskPriorityDisinherit+0x80>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <xTaskPriorityDisinherit+0xb0>)
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	0013      	movs	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	189b      	adds	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <xTaskPriorityDisinherit+0xb4>)
 80020ae:	189a      	adds	r2, r3, r2
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3304      	adds	r3, #4
 80020b4:	0019      	movs	r1, r3
 80020b6:	0010      	movs	r0, r2
 80020b8:	f7fe fc1c 	bl	80008f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80020bc:	2301      	movs	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80020c0:	68fb      	ldr	r3, [r7, #12]
	}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b004      	add	sp, #16
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	2000183c 	.word	0x2000183c
 80020d0:	20001904 	.word	0x20001904
 80020d4:	20001840 	.word	0x20001840

080020d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80020e2:	f7fe fd1d 	bl	8000b20 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <ulTaskNotifyTake+0x80>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10e      	bne.n	800210e <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <ulTaskNotifyTake+0x80>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2254      	movs	r2, #84	; 0x54
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f8db 	bl	80022c0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800210a:	f7fe fcf9 	bl	8000b00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800210e:	f7fe fd19 	bl	8000b44 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002112:	f7fe fd05 	bl	8000b20 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <ulTaskNotifyTake+0x80>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00c      	beq.n	800213e <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <ulTaskNotifyTake+0x80>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	651a      	str	r2, [r3, #80]	; 0x50
 8002132:	e004      	b.n	800213e <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <ulTaskNotifyTake+0x80>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	3a01      	subs	r2, #1
 800213c:	651a      	str	r2, [r3, #80]	; 0x50
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <ulTaskNotifyTake+0x80>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2254      	movs	r2, #84	; 0x54
 8002144:	2100      	movs	r1, #0
 8002146:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8002148:	f7fe fcfc 	bl	8000b44 <vPortExitCritical>

		return ulReturn;
 800214c:	68fb      	ldr	r3, [r7, #12]
	}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	2000183c 	.word	0x2000183c

0800215c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800216c:	2301      	movs	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <xTaskGenericNotifyFromISR+0x1e>
 8002176:	b672      	cpsid	i
 8002178:	e7fe      	b.n	8002178 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800217e:	f7fe fcf9 	bl	8000b74 <ulSetInterruptMaskFromISR>
 8002182:	0003      	movs	r3, r0
 8002184:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002194:	2313      	movs	r3, #19
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	2154      	movs	r1, #84	; 0x54
 800219c:	5c52      	ldrb	r2, [r2, r1]
 800219e:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2254      	movs	r2, #84	; 0x54
 80021a4:	2102      	movs	r1, #2
 80021a6:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80021a8:	1dfb      	adds	r3, r7, #7
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d821      	bhi.n	80021f4 <xTaskGenericNotifyFromISR+0x98>
 80021b0:	009a      	lsls	r2, r3, #2
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <xTaskGenericNotifyFromISR+0x148>)
 80021b4:	18d3      	adds	r3, r2, r3
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80021c6:	e01e      	b.n	8002206 <xTaskGenericNotifyFromISR+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80021d2:	e018      	b.n	8002206 <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80021da:	e014      	b.n	8002206 <xTaskGenericNotifyFromISR+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80021dc:	2313      	movs	r3, #19
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80021ec:	e00b      	b.n	8002206 <xTaskGenericNotifyFromISR+0xaa>
						xReturn = pdFAIL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
					break;
 80021f2:	e008      	b.n	8002206 <xTaskGenericNotifyFromISR+0xaa>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f8:	3301      	adds	r3, #1
 80021fa:	d003      	beq.n	8002204 <xTaskGenericNotifyFromISR+0xa8>
 80021fc:	b672      	cpsid	i
 80021fe:	e7fe      	b.n	80021fe <xTaskGenericNotifyFromISR+0xa2>
					break;
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	e000      	b.n	8002206 <xTaskGenericNotifyFromISR+0xaa>
					break;
 8002204:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002206:	2313      	movs	r3, #19
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d13f      	bne.n	8002290 <xTaskGenericNotifyFromISR+0x134>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <xTaskGenericNotifyFromISR+0xc0>
 8002218:	b672      	cpsid	i
 800221a:	e7fe      	b.n	800221a <xTaskGenericNotifyFromISR+0xbe>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <xTaskGenericNotifyFromISR+0x14c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11d      	bne.n	8002260 <xTaskGenericNotifyFromISR+0x104>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	3304      	adds	r3, #4
 8002228:	0018      	movs	r0, r3
 800222a:	f7fe fbbb 	bl	80009a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <xTaskGenericNotifyFromISR+0x150>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d903      	bls.n	8002242 <xTaskGenericNotifyFromISR+0xe6>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <xTaskGenericNotifyFromISR+0x150>)
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002246:	0013      	movs	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	189b      	adds	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <xTaskGenericNotifyFromISR+0x154>)
 8002250:	189a      	adds	r2, r3, r2
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3304      	adds	r3, #4
 8002256:	0019      	movs	r1, r3
 8002258:	0010      	movs	r0, r2
 800225a:	f7fe fb4b 	bl	80008f4 <vListInsertEnd>
 800225e:	e007      	b.n	8002270 <xTaskGenericNotifyFromISR+0x114>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3318      	adds	r3, #24
 8002264:	001a      	movs	r2, r3
 8002266:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <xTaskGenericNotifyFromISR+0x158>)
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f7fe fb42 	bl	80008f4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <xTaskGenericNotifyFromISR+0x15c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	429a      	cmp	r2, r3
 800227c:	d908      	bls.n	8002290 <xTaskGenericNotifyFromISR+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <xTaskGenericNotifyFromISR+0x12e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <xTaskGenericNotifyFromISR+0x160>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe fc74 	bl	8000b80 <vClearInterruptMaskFromISR>

		return xReturn;
 8002298:	69fb      	ldr	r3, [r7, #28]
	}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b008      	add	sp, #32
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	08002a34 	.word	0x08002a34
 80022a8:	20001924 	.word	0x20001924
 80022ac:	20001904 	.word	0x20001904
 80022b0:	20001840 	.word	0x20001840
 80022b4:	200018d4 	.word	0x200018d4
 80022b8:	2000183c 	.word	0x2000183c
 80022bc:	20001910 	.word	0x20001910

080022c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <prvAddCurrentTaskToDelayedList+0x90>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <prvAddCurrentTaskToDelayedList+0x94>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3304      	adds	r3, #4
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7fe fb64 	bl	80009a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	d10b      	bne.n	80022fa <prvAddCurrentTaskToDelayedList+0x3a>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <prvAddCurrentTaskToDelayedList+0x94>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	1d1a      	adds	r2, r3, #4
 80022ee:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <prvAddCurrentTaskToDelayedList+0x98>)
 80022f0:	0011      	movs	r1, r2
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7fe fafe 	bl	80008f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022f8:	e026      	b.n	8002348 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	18d3      	adds	r3, r2, r3
 8002300:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <prvAddCurrentTaskToDelayedList+0x94>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	429a      	cmp	r2, r3
 8002310:	d209      	bcs.n	8002326 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <prvAddCurrentTaskToDelayedList+0x9c>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <prvAddCurrentTaskToDelayedList+0x94>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3304      	adds	r3, #4
 800231c:	0019      	movs	r1, r3
 800231e:	0010      	movs	r0, r2
 8002320:	f7fe fb0a 	bl	8000938 <vListInsert>
}
 8002324:	e010      	b.n	8002348 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <prvAddCurrentTaskToDelayedList+0x94>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3304      	adds	r3, #4
 8002330:	0019      	movs	r1, r3
 8002332:	0010      	movs	r0, r2
 8002334:	f7fe fb00 	bl	8000938 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <prvAddCurrentTaskToDelayedList+0xa4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d202      	bcs.n	8002348 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b004      	add	sp, #16
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20001900 	.word	0x20001900
 8002354:	2000183c 	.word	0x2000183c
 8002358:	200018e8 	.word	0x200018e8
 800235c:	200018d0 	.word	0x200018d0
 8002360:	200018cc 	.word	0x200018cc
 8002364:	2000191c 	.word	0x2000191c

08002368 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002372:	f000 faa3 	bl	80028bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <xTimerCreateTimerTask+0x44>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800237e:	490c      	ldr	r1, [pc, #48]	; (80023b0 <xTimerCreateTimerTask+0x48>)
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <xTimerCreateTimerTask+0x4c>)
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <xTimerCreateTimerTask+0x50>)
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	2302      	movs	r3, #2
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	2250      	movs	r2, #80	; 0x50
 800238e:	f7ff f86e 	bl	800146e <xTaskCreate>
 8002392:	0003      	movs	r3, r0
 8002394:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <xTimerCreateTimerTask+0x38>
 800239c:	b672      	cpsid	i
 800239e:	e7fe      	b.n	800239e <xTimerCreateTimerTask+0x36>
	return xReturn;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	20001958 	.word	0x20001958
 80023b0:	08002a24 	.word	0x08002a24
 80023b4:	080024dd 	.word	0x080024dd
 80023b8:	2000195c 	.word	0x2000195c

080023bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <xTimerGenericCommand+0x1c>
 80023d4:	b672      	cpsid	i
 80023d6:	e7fe      	b.n	80023d6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <xTimerGenericCommand+0x94>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d031      	beq.n	8002444 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023e0:	2110      	movs	r1, #16
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	dc1a      	bgt.n	8002430 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023fa:	f7ff fdf5 	bl	8001fe8 <xTaskGetSchedulerState>
 80023fe:	0003      	movs	r3, r0
 8002400:	2b02      	cmp	r3, #2
 8002402:	d10a      	bne.n	800241a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <xTimerGenericCommand+0x94>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800240a:	2310      	movs	r3, #16
 800240c:	18f9      	adds	r1, r7, r3
 800240e:	2300      	movs	r3, #0
 8002410:	f7fe fcc7 	bl	8000da2 <xQueueGenericSend>
 8002414:	0003      	movs	r3, r0
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	e014      	b.n	8002444 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <xTimerGenericCommand+0x94>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	2310      	movs	r3, #16
 8002420:	18f9      	adds	r1, r7, r3
 8002422:	2300      	movs	r3, #0
 8002424:	2200      	movs	r2, #0
 8002426:	f7fe fcbc 	bl	8000da2 <xQueueGenericSend>
 800242a:	0003      	movs	r3, r0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e009      	b.n	8002444 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <xTimerGenericCommand+0x94>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	2310      	movs	r3, #16
 8002438:	18f9      	adds	r1, r7, r3
 800243a:	2300      	movs	r3, #0
 800243c:	f7fe fd75 	bl	8000f2a <xQueueGenericSendFromISR>
 8002440:	0003      	movs	r3, r0
 8002442:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002444:	69fb      	ldr	r3, [r7, #28]
}
 8002446:	0018      	movs	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	b008      	add	sp, #32
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	20001958 	.word	0x20001958

08002454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <prvProcessExpiredTimer+0x84>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3304      	adds	r3, #4
 800246c:	0018      	movs	r0, r3
 800246e:	f7fe fa99 	bl	80009a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2228      	movs	r2, #40	; 0x28
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	001a      	movs	r2, r3
 800247a:	2304      	movs	r3, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d019      	beq.n	80024b4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	18d1      	adds	r1, r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f8c3 	bl	8002618 <prvInsertTimerInActiveList>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d017      	beq.n	80024c6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	f7ff ff8b 	bl	80023bc <xTimerGenericCommand>
 80024a6:	0003      	movs	r3, r0
 80024a8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <prvProcessExpiredTimer+0x72>
 80024b0:	b672      	cpsid	i
 80024b2:	e7fe      	b.n	80024b2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2228      	movs	r2, #40	; 0x28
 80024b8:	5c9b      	ldrb	r3, [r3, r2]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4393      	bics	r3, r2
 80024be:	b2d9      	uxtb	r1, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2228      	movs	r2, #40	; 0x28
 80024c4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	0010      	movs	r0, r2
 80024ce:	4798      	blx	r3
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b004      	add	sp, #16
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20001950 	.word	0x20001950

080024dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024e4:	2308      	movs	r3, #8
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 f853 	bl	8002594 <prvGetNextExpireTime>
 80024ee:	0003      	movs	r3, r0
 80024f0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f803 	bl	8002504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80024fe:	f000 f8cd 	bl	800269c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002502:	e7ef      	b.n	80024e4 <prvTimerTask+0x8>

08002504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800250e:	f7ff fa25 	bl	800195c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002512:	2308      	movs	r3, #8
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f85e 	bl	80025d8 <prvSampleTimeNow>
 800251c:	0003      	movs	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d12b      	bne.n	800257e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <prvProcessTimerOrBlockTask+0x42>
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d808      	bhi.n	8002546 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8002534:	f7ff fa1e 	bl	8001974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0011      	movs	r1, r2
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff ff88 	bl	8002454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002544:	e01d      	b.n	8002582 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <prvProcessTimerOrBlockTask+0x88>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <prvProcessTimerOrBlockTask+0x56>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <prvProcessTimerOrBlockTask+0x58>
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <prvProcessTimerOrBlockTask+0x8c>)
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	0019      	movs	r1, r3
 800256c:	f7fe ff4c 	bl	8001408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002570:	f7ff fa00 	bl	8001974 <xTaskResumeAll>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d104      	bne.n	8002582 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8002578:	f7fe fac2 	bl	8000b00 <vPortYield>
}
 800257c:	e001      	b.n	8002582 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800257e:	f7ff f9f9 	bl	8001974 <xTaskResumeAll>
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b004      	add	sp, #16
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	20001954 	.word	0x20001954
 8002590:	20001958 	.word	0x20001958

08002594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <prvGetNextExpireTime+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <prvGetNextExpireTime+0x16>
 80025a6:	2201      	movs	r2, #1
 80025a8:	e000      	b.n	80025ac <prvGetNextExpireTime+0x18>
 80025aa:	2200      	movs	r2, #0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <prvGetNextExpireTime+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e001      	b.n	80025c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80025c8:	68fb      	ldr	r3, [r7, #12]
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	20001950 	.word	0x20001950

080025d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80025e0:	f7ff fa54 	bl	8001a8c <xTaskGetTickCount>
 80025e4:	0003      	movs	r3, r0
 80025e6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <prvSampleTimeNow+0x3c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d205      	bcs.n	80025fe <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80025f2:	f000 f905 	bl	8002800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e002      	b.n	8002604 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <prvSampleTimeNow+0x3c>)
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20001960 	.word	0x20001960

08002618 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d812      	bhi.n	8002664 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e01b      	b.n	800268a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <prvInsertTimerInActiveList+0x7c>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	0019      	movs	r1, r3
 800265c:	0010      	movs	r0, r2
 800265e:	f7fe f96b 	bl	8000938 <vListInsert>
 8002662:	e012      	b.n	800268a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d206      	bcs.n	800267a <prvInsertTimerInActiveList+0x62>
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d302      	bcc.n	800267a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002674:	2301      	movs	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e007      	b.n	800268a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <prvInsertTimerInActiveList+0x80>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	0019      	movs	r1, r3
 8002684:	0010      	movs	r0, r2
 8002686:	f7fe f957 	bl	8000938 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800268a:	697b      	ldr	r3, [r7, #20]
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b006      	add	sp, #24
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20001954 	.word	0x20001954
 8002698:	20001950 	.word	0x20001950

0800269c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026a2:	e099      	b.n	80027d8 <prvProcessReceivedCommands+0x13c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026a4:	2308      	movs	r3, #8
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da00      	bge.n	80026b0 <prvProcessReceivedCommands+0x14>
 80026ae:	e092      	b.n	80027d6 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026b0:	2308      	movs	r3, #8
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	3304      	adds	r3, #4
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fe f96d 	bl	80009a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff ff83 	bl	80025d8 <prvSampleTimeNow>
 80026d2:	0003      	movs	r3, r0
 80026d4:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 80026d6:	2308      	movs	r3, #8
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d900      	bls.n	80026e2 <prvProcessReceivedCommands+0x46>
 80026e0:	e07a      	b.n	80027d8 <prvProcessReceivedCommands+0x13c>
 80026e2:	009a      	lsls	r2, r3, #2
 80026e4:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <prvProcessReceivedCommands+0x15c>)
 80026e6:	18d3      	adds	r3, r2, r3
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2228      	movs	r2, #40	; 0x28
 80026f0:	5c9b      	ldrb	r3, [r3, r2]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b2d9      	uxtb	r1, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2228      	movs	r2, #40	; 0x28
 80026fc:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80026fe:	2008      	movs	r0, #8
 8002700:	183b      	adds	r3, r7, r0
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	18d1      	adds	r1, r2, r3
 800270a:	183b      	adds	r3, r7, r0
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	69f8      	ldr	r0, [r7, #28]
 8002712:	f7ff ff81 	bl	8002618 <prvInsertTimerInActiveList>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d05e      	beq.n	80027d8 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	0010      	movs	r0, r2
 8002722:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2228      	movs	r2, #40	; 0x28
 8002728:	5c9b      	ldrb	r3, [r3, r2]
 800272a:	001a      	movs	r2, r3
 800272c:	2304      	movs	r3, #4
 800272e:	4013      	ands	r3, r2
 8002730:	d052      	beq.n	80027d8 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002732:	2308      	movs	r3, #8
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	18d2      	adds	r2, r2, r3
 800273e:	69f8      	ldr	r0, [r7, #28]
 8002740:	2300      	movs	r3, #0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	2100      	movs	r1, #0
 8002748:	f7ff fe38 	bl	80023bc <xTimerGenericCommand>
 800274c:	0003      	movs	r3, r0
 800274e:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d140      	bne.n	80027d8 <prvProcessReceivedCommands+0x13c>
 8002756:	b672      	cpsid	i
 8002758:	e7fe      	b.n	8002758 <prvProcessReceivedCommands+0xbc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2228      	movs	r2, #40	; 0x28
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	2201      	movs	r2, #1
 8002762:	4393      	bics	r3, r2
 8002764:	b2d9      	uxtb	r1, r3
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2228      	movs	r2, #40	; 0x28
 800276a:	5499      	strb	r1, [r3, r2]
					break;
 800276c:	e034      	b.n	80027d8 <prvProcessReceivedCommands+0x13c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2228      	movs	r2, #40	; 0x28
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	2201      	movs	r2, #1
 8002776:	4313      	orrs	r3, r2
 8002778:	b2d9      	uxtb	r1, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2228      	movs	r2, #40	; 0x28
 800277e:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002780:	2308      	movs	r3, #8
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <prvProcessReceivedCommands+0xfa>
 8002792:	b672      	cpsid	i
 8002794:	e7fe      	b.n	8002794 <prvProcessReceivedCommands+0xf8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	18d1      	adds	r1, r2, r3
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	69f8      	ldr	r0, [r7, #28]
 80027a4:	f7ff ff38 	bl	8002618 <prvInsertTimerInActiveList>
					break;
 80027a8:	e016      	b.n	80027d8 <prvProcessReceivedCommands+0x13c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2228      	movs	r2, #40	; 0x28
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	001a      	movs	r2, r3
 80027b2:	2302      	movs	r3, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d104      	bne.n	80027c2 <prvProcessReceivedCommands+0x126>
						{
							vPortFree( pxTimer );
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fe f864 	bl	8000888 <vPortFree>
 80027c0:	e00a      	b.n	80027d8 <prvProcessReceivedCommands+0x13c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2228      	movs	r2, #40	; 0x28
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4393      	bics	r3, r2
 80027cc:	b2d9      	uxtb	r1, r3
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2228      	movs	r2, #40	; 0x28
 80027d2:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027d4:	e000      	b.n	80027d8 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80027d6:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <prvProcessReceivedCommands+0x160>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2208      	movs	r2, #8
 80027de:	18b9      	adds	r1, r7, r2
 80027e0:	2200      	movs	r2, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7fe fc15 	bl	8001012 <xQueueReceive>
 80027e8:	1e03      	subs	r3, r0, #0
 80027ea:	d000      	beq.n	80027ee <prvProcessReceivedCommands+0x152>
 80027ec:	e75a      	b.n	80026a4 <prvProcessReceivedCommands+0x8>
	}
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b008      	add	sp, #32
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	08002a48 	.word	0x08002a48
 80027fc:	20001958 	.word	0x20001958

08002800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002806:	e041      	b.n	800288c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <prvSwitchTimerLists+0xb4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <prvSwitchTimerLists+0xb4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3304      	adds	r3, #4
 8002820:	0018      	movs	r0, r3
 8002822:	f7fe f8bf 	bl	80009a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	0010      	movs	r0, r2
 800282e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2228      	movs	r2, #40	; 0x28
 8002834:	5c9b      	ldrb	r3, [r3, r2]
 8002836:	001a      	movs	r2, r3
 8002838:	2304      	movs	r3, #4
 800283a:	4013      	ands	r3, r2
 800283c:	d026      	beq.n	800288c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d90e      	bls.n	800286e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <prvSwitchTimerLists+0xb4>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3304      	adds	r3, #4
 8002864:	0019      	movs	r1, r3
 8002866:	0010      	movs	r0, r2
 8002868:	f7fe f866 	bl	8000938 <vListInsert>
 800286c:	e00e      	b.n	800288c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	2100      	movs	r1, #0
 800287a:	f7ff fd9f 	bl	80023bc <xTimerGenericCommand>
 800287e:	0003      	movs	r3, r0
 8002880:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <prvSwitchTimerLists+0x8c>
 8002888:	b672      	cpsid	i
 800288a:	e7fe      	b.n	800288a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <prvSwitchTimerLists+0xb4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1b8      	bne.n	8002808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <prvSwitchTimerLists+0xb4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <prvSwitchTimerLists+0xb8>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <prvSwitchTimerLists+0xb4>)
 80028a2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <prvSwitchTimerLists+0xb8>)
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b006      	add	sp, #24
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	20001950 	.word	0x20001950
 80028b8:	20001954 	.word	0x20001954

080028bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028c0:	f7fe f92e 	bl	8000b20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <prvCheckForValidListAndQueue+0x5c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d120      	bne.n	800290e <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <prvCheckForValidListAndQueue+0x60>)
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7fd ffe7 	bl	80008a2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <prvCheckForValidListAndQueue+0x64>)
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7fd ffe3 	bl	80008a2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <prvCheckForValidListAndQueue+0x68>)
 80028de:	4a0f      	ldr	r2, [pc, #60]	; (800291c <prvCheckForValidListAndQueue+0x60>)
 80028e0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <prvCheckForValidListAndQueue+0x6c>)
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <prvCheckForValidListAndQueue+0x64>)
 80028e6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028e8:	2200      	movs	r2, #0
 80028ea:	210c      	movs	r1, #12
 80028ec:	2002      	movs	r0, #2
 80028ee:	f7fe fa03 	bl	8000cf8 <xQueueGenericCreate>
 80028f2:	0002      	movs	r2, r0
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <prvCheckForValidListAndQueue+0x5c>)
 80028f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <prvCheckForValidListAndQueue+0x5c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <prvCheckForValidListAndQueue+0x5c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <prvCheckForValidListAndQueue+0x70>)
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f7fe fd55 	bl	80013b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800290e:	f7fe f919 	bl	8000b44 <vPortExitCritical>
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20001958 	.word	0x20001958
 800291c:	20001928 	.word	0x20001928
 8002920:	2000193c 	.word	0x2000193c
 8002924:	20001950 	.word	0x20001950
 8002928:	20001954 	.word	0x20001954
 800292c:	08002a2c 	.word	0x08002a2c

08002930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002932:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <LoopForever+0x6>)
  ldr r1, =_edata
 8002936:	490e      	ldr	r1, [pc, #56]	; (8002970 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002938:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <LoopForever+0xe>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800293c:	e002      	b.n	8002944 <LoopCopyDataInit>

0800293e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002942:	3304      	adds	r3, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002948:	d3f9      	bcc.n	800293e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <LoopForever+0x12>)
  ldr r4, =_ebss
 800294c:	4c0b      	ldr	r4, [pc, #44]	; (800297c <LoopForever+0x16>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002950:	e001      	b.n	8002956 <LoopFillZerobss>

08002952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002954:	3204      	adds	r2, #4

08002956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002958:	d3fb      	bcc.n	8002952 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800295a:	f7fd fc61 	bl	8000220 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800295e:	f000 f811 	bl	8002984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002962:	f7fd ff19 	bl	8000798 <main>

08002966 <LoopForever>:

LoopForever:
    b LoopForever
 8002966:	e7fe      	b.n	8002966 <LoopForever>
  ldr   r0, =_estack
 8002968:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002974:	08002a78 	.word	0x08002a78
  ldr r2, =_sbss
 8002978:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800297c:	200019a4 	.word	0x200019a4

08002980 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC_COMP_IRQHandler>
	...

08002984 <__libc_init_array>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	2600      	movs	r6, #0
 8002988:	4d0c      	ldr	r5, [pc, #48]	; (80029bc <__libc_init_array+0x38>)
 800298a:	4c0d      	ldr	r4, [pc, #52]	; (80029c0 <__libc_init_array+0x3c>)
 800298c:	1b64      	subs	r4, r4, r5
 800298e:	10a4      	asrs	r4, r4, #2
 8002990:	42a6      	cmp	r6, r4
 8002992:	d109      	bne.n	80029a8 <__libc_init_array+0x24>
 8002994:	2600      	movs	r6, #0
 8002996:	f000 f82b 	bl	80029f0 <_init>
 800299a:	4d0a      	ldr	r5, [pc, #40]	; (80029c4 <__libc_init_array+0x40>)
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <__libc_init_array+0x44>)
 800299e:	1b64      	subs	r4, r4, r5
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	42a6      	cmp	r6, r4
 80029a4:	d105      	bne.n	80029b2 <__libc_init_array+0x2e>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	00b3      	lsls	r3, r6, #2
 80029aa:	58eb      	ldr	r3, [r5, r3]
 80029ac:	4798      	blx	r3
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7ee      	b.n	8002990 <__libc_init_array+0xc>
 80029b2:	00b3      	lsls	r3, r6, #2
 80029b4:	58eb      	ldr	r3, [r5, r3]
 80029b6:	4798      	blx	r3
 80029b8:	3601      	adds	r6, #1
 80029ba:	e7f2      	b.n	80029a2 <__libc_init_array+0x1e>
 80029bc:	08002a70 	.word	0x08002a70
 80029c0:	08002a70 	.word	0x08002a70
 80029c4:	08002a70 	.word	0x08002a70
 80029c8:	08002a74 	.word	0x08002a74

080029cc <memcpy>:
 80029cc:	2300      	movs	r3, #0
 80029ce:	b510      	push	{r4, lr}
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d100      	bne.n	80029d6 <memcpy+0xa>
 80029d4:	bd10      	pop	{r4, pc}
 80029d6:	5ccc      	ldrb	r4, [r1, r3]
 80029d8:	54c4      	strb	r4, [r0, r3]
 80029da:	3301      	adds	r3, #1
 80029dc:	e7f8      	b.n	80029d0 <memcpy+0x4>

080029de <memset>:
 80029de:	0003      	movs	r3, r0
 80029e0:	1812      	adds	r2, r2, r0
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d100      	bne.n	80029e8 <memset+0xa>
 80029e6:	4770      	bx	lr
 80029e8:	7019      	strb	r1, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	e7f9      	b.n	80029e2 <memset+0x4>
	...

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
